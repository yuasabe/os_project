/* "boot32.ask" ver.0.3 copyright(C) 2004 H.Kawai(川合秀実) */

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

void testmemory();
void bmalloc();
void error();
void bmap();
void set_modulesegment();
void putstr();
void dumpreg();
void decode_tek0();

/* 進入条件：
	SS.base = 0xff000 (ff00)
	DS.base = SysWork
    IDTGDT = 1MB+0KB (このページは暫定スタックとしても使用)
	CR3 = 1MB+4KB (8K, 12KはPTE)

	なおリアルの最後の4KB(636KB)はV86用のスタックになる
	さらに12KBがBIOSとの交信用

	リアルの640KB(+128KB)と次の1MBについては一切チェックしない。
	そこが疑わしいようでは、OSASKを起動するのは絶望的だから。

*/

/* いつか、initとbase32を分けよう！ */

void far boot32()
{
	STR_SYSWORK *swork == DS:0;

	ESP = 0x2000; /* 暫定スタックへ */

	PUSHFD();
	POP(EAX);
	EAX |= 0x00240000 /* bit18,21 */;
	EAX &= 0xfffc88ff /* bit8,9,10,12,13,14,16,17 */;
	PUSH(EAX);
	POPFD();
	PUSHFD();
	POP(EDX);
	swork->eflags = EDX;
	EDX >>= 16;

	TEST(DL, 0x04); /* bit18(AC) */
	if (!= 0) {
		EAX = CR0;
		AL |= 0x21; /* NE, PE */
		CR0 = EAX;
	}

	/* all_selの作成(for dummy GDT) */
	EBP = 0x1180 + 8;
	(int) [SS:EBP + 0] = 0x0000ffff;
	(int) [SS:EBP + 4] = 0x00cf9200;
	PUSH(8);
	POP(ES); /* ES = all_sel */

	/* プロテクトメモリテスト */
	EBX = 16 * 1024 * 1024; /* i386DX, i486, Pentium */
	EAX =  2 * 1024 * 1024;
	testmemory();
	ECX += 1024 * 1024;
	swork->bootmalloc_fre2 = ECX;
	/* A24-31が生きているかどうかのチェック */	
	EDI = 0x102c00; /* PTE 3MB */
	EAX = 0x01000007;
	TEST(DL, 0x04);
	if (!= 0 /* 486 */)
		AL= 0x1f /* キャッシュ禁止(PCD = 1, PWT = 1) */;
	STOSD();
	EAX = CR3;
	CR3 = EAX;
	EBX = 0;
	EAX = 0xaa55aa55;
	ECX = [ES:EBX];
	[ES:EBX] = EAX;
	NOT(EAX);
	[ES:0x00300000] = EAX;
	NOT(EAX);
	CMP(EAX, [ES:EBX]);
	[ES:EBX] = ECX;
	if (==) {
		EAX =   16 * 1024 * 1024;
		EBX = 1024 * 1024 * 1024;
		testmemory();
		swork->bootmalloc_fre3 = ECX;
	}
	#if (defined(PCAT))
		EAX = 160 * 9 * 1024; /* PCAT diskbuf */
	#elif (defined(TOWNS))
		EAX = 160 * 8 * 1024; /* TOWNS diskbuf */
	#elif (defined(NEC98))
		EAX = 160 * 8 * 1024; /* NEC98 diskbuf */
	#endif
	swork->bootmalloc_adr2 += EAX;
	swork->bootmalloc_fre2 -= EAX;
//	if ((unsigned) <= 0)
//		INT(0x03);

	/* モジュール転送先確保 */
	AL = 16;
	ECX = 0;
	ESI = (offset) swork->modulelist;
	do {
		ECX += [DS:ESI + 8]; /* size */
		ESI += 16;
		ECX += 15;
		ECX &= 0xfffffff0;
		AL--;
	} while (!= 0);

	ECX += 0xfff;
	ECX &= 0xfffff000;
	swork->bmodule_size = ECX;
	bmalloc();
	swork->bmodule_paddr = EAX;

	/* 各種ワークエリアの確保 */

	ESI = (offset) swork->modulelist;
	do {
		ECX = [DS:ESI +  8]; /* size */
		EAX = [DS:ESI + 12]; /* addr */
		if (ECX != 0) {
			if (EAX == -1) {
				bmalloc();
				[DS:ESI + 12] = EAX; /* addr */
			}
		}
		ESI += 16;
	} while ((unsigned) (int) [DS:ESI + 0] != 0);

	/* PDEPTEを作り直す(作り直さないと落ち着いてマッピングができない) */
	/* PDEPTEは最大で1MB(=1GB) */
	/* もっとも、この後で0クリアルーチンを追加していけばもっと増やせるが */

	EDI = 0x102c00; /* PTE 3MB-4MB */
	EAX = swork->alloclist[ENT_PDEPTE + 12];
	AL = 3;
	ECX = swork->alloclist[ENT_PDEPTE +  8];
	PUSH(ECX);
	do {
		STOSD();
		EAX += 4096;
		ECX -= 4096;
	} while ((unsigned) > 0);
	EAX = CR3;
	CR3 = EAX;
	POP(ECX);

	EDI = 3 * 1024 * 1024;
	EAX = 0;
	PUSH(EDI);
	PUSH(ECX);
	ECX /= 4;
	asmout("REP STOSD"); /* PDEPTEの0クリア */
	POP(ECX);
	POP(EDI);

	EAX =  8 * 1024;
	EBX = swork->alloclist[ENT_PDEPTE + 12];
	EBX += EAX;
	BL = 0x07;
	TEST(DL, 0x04);
	if (!= 0)
		BL = 0x1f;
	#if (!defined(PCAT))
		/* VRAMの最大は4MB */
		[ES:EDI + 0x1e00] = EBX;
		[ES:EDI + 0x0e00] = EAX;
		EAX += 4096;
		EBX += 4096;
	#else
		/* VRAMの最大は16MB */
		[ES:EDI + 0x1e00] = EBX;
		[ES:EDI + 0x0e00] = EAX;
		EAX += 4096;
		EBX += 4096;
		[ES:EDI + 0x1e04] = EBX;
		[ES:EDI + 0x0e04] = EAX;
		EAX += 4096;
		EBX += 4096;
		[ES:EDI + 0x1e08] = EBX;
		[ES:EDI + 0x0e08] = EAX;
		EAX += 4096;
		EBX += 4096;
		[ES:EDI + 0x1e0c] = EBX;
		[ES:EDI + 0x0e0c] = EAX;
		EAX += 4096;
		EBX += 4096;
		/* PCIデバイス用空間 (0xac00_0000) */
		[ES:EDI + 0x1ac0] = EBX;
		[ES:EDI + 0x0ac0] = EAX;
		EAX += 4096;
		EBX += 4096;
	#endif
	PUSH(ECX);
	ECX -= EAX;
	do {
		[ES:EDI + 0x1000] = EBX;
		STOSD();
		EBX += 4096;
		EAX += 4096;
		ECX -= 4096;
	} while ((unsigned) > 0);
	#if (!defined(PCAT))
		EDI = 0x303000;
	#else
		EDI = 0x307000;
	#endif
	ECX = 3 * 1024 / 4;
	EAX = 7;
fillpte:
	STOSD();
	EAX += 4096;
	asmout("LOOP .fillpte");
	POP(ECX);

	/* ptepdeのマッピング */
	/* +0xxx:link, +1xxx:pde, +2xxx:VRAM, +3xxx:PTE(0-4) : 非PCAT */
	/* +0xxx:link, +1xxx:pde, +2xxx:VRAM, +6xxx:c0000000 +7xxx:PTE(0-4) : PCAT */
	#if (!defined(PCAT))
		EDI = 0x303000 + 0x1200; /* 4.5MB */
	#else
		EDI = 0x307000 + 0x1200; /* 4.5MB */
	#endif
	EAX = swork->alloclist[ENT_PDEPTE + 12];
	AL = 7;
	PUSH(ECX);
	do {
		STOSD();
		EAX += 4096;
		ECX -= 4096;
	} while ((unsigned) > 0);
	POP(ECX);

	EAX = swork->alloclist[ENT_PDEPTE + 12];
	EAX += 4096;
	TEST(DL, 0x04);
	if (!= 0)
		AL = 0x18;
	CR3 = EAX;

	EDI += 0x480000 - 0x300000;
	swork->bootlinear_EDI = EDI;
	swork->bootlinear += ECX;

	/* idtgdtのマッピング */
	ECX = swork->alloclist[ENT_IDTGDT +  8];
	EAX = swork->alloclist[ENT_IDTGDT + 12];
	bmap();
	PUSH(ECX);
	EDI = EDX;
	ECX /= 4;
	EAX = 0;
	asmout("REP STOSD"); /* 0クリア */
	POP(ECX);
	(int) [ES:EDX + 384 +   8 + 0] = 0x0000ffff; /* all_sel */
	(int) [ES:EDX + 384 +   8 + 4] = 0x00cf9200;
	PUSH(ES); /* all_sel */
	POP(GS);

	LEA(EBX, [EDX + 384 + 120]); /* idtgdt_sel */
	EAX = 0x4092;
	PUSH(EDX);
	PUSH(EAX);
	set_modulesegment();
	POP(EAX);
	POP(EDX);

	ECX = swork->alloclist[ENT_PDEPTE +  8];
	PUSH(EDX);
	LEA(EBX, [EDX + 384 + SEL_PDEPTE]);
	EDX = 0x480000;
//	EAX = 0x4092;
	set_modulesegment();

	PUSH(0x017f0000);
	LIDT([SS:ESP + 2]);
	ECX = swork->alloclist[ENT_IDTGDT +  8];
	ECX -= 0x181;
	[SS:ESP + 2] = CX;
	(int) [SS:ESP + 4] += 0x180;
	LGDT([SS:ESP + 2]);
	POP(EAX);
	POP(ECX);

/* pdepte = 0x480000 - 4c2ffff */
/* GDTR.base = 0x4c3180 */

	/* これで、SEL_ALL, SEL_IDTGDT, SEL_PDEPTEは使える */
	PUSH(SEL_IDTGDT);
	POP(GS); /* = SEL_IDTGDT */
	PUSH(SEL_PDEPTE);
	POP(ES); /* = SEL_PDEPTE */
	swork->bootlinear_EDI -= 0x480000;

	ECX = swork->bmodule_size;
	EAX = swork->bmodule_paddr;
	bmap();
	swork->bmodule_laddr = EDX; /* 0x4c4000 */

	/* 以下はinitがやるべきことかも */
	/* いや、bmapを使いたいから、boot32でやるのが正しい */

	asmout("MOV EDI,.initsel0");
	do {
		ESI = (unsigned short) [CS:EDI + 2];
		ECX = [DS:ESI +  8];
		EAX = [DS:ESI + 12];
		bmap();
		AX = (unsigned short) [CS:EDI + 0];
		EBX = (unsigned short) [CS:EDI + 4];
		EDI += 6;
		if (AL == 0x96 /* stack */)
			EDX += ECX;
		set_modulesegment();
	} while ((unsigned) (char) [CS:EDI] != 0);

	LEA(EBX, swork->modulelist[ENT_BOOT32 - 16]);
	PUSH(8);
	EBP = swork->bmodule_paddr;
	EDI = swork->bmodule_laddr;
	POP(FS);
	do {
		ECX = [DS:EBX +  8];
		ESI = (unsigned short) [DS:EBX + 12];
		ECX += 15;
		ESI *= 16;
		ECX &= 0xfffffff0;
		if (!= 0) {
			CMP((char) [DS:EBX + 15], 0);
			[DS:EBX + 12] = EBP;
			LEA(EBP, [SS:EBP + ECX]);
			if (== 0) {
				do {
					EAX = [FS:ESI];
					ESI += 4;
					[FS:EDI] = EAX;
					EDI += 4;
					ECX -= 4;
				} while ((unsigned) > 0);
			} else {
				ECX += EDI;
				PUSH(ECX);
				PUSH(EBP);
				EBP = [DS:EBX +  8];
				PUSH(EBX);
				/* tek0展開 */
				/* FS:ESIからFS:EDIへ, EBPバイト */
				decode_tek0();
				POP(EBX);
				POP(EBP);
				POP(EDI);
			}
		}
		EBX -= 16;
	} while (EBX >= (offset) swork->modulelist); /* syswork (0x0020) */

	asmout("MOV EDI,.initsel1");
	do {
		ESI = (unsigned short) [CS:EDI + 2];
		EBX = (unsigned short) [CS:EDI + 4];
		EDX = [DS:ESI + 12];
		ECX = [DS:ESI +  8];
		EDX -= swork->bmodule_paddr;
		AX = [CS:EDI + 0];
		EDI += 6;
		EDX += swork->bmodule_laddr;
		set_modulesegment();
	} while ((unsigned) (char) [CS:EDI] != 0);

	PUSH(3*8);
	POP(DS);
	EAX = 6 * 