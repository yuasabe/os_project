/* "papi0.ask" ver.0.6 copyright(C) 2002 H.Kawai(川合秀実) */
/* 64bitタイプ */

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

#define	DEBUG		0
#define	DEBUG1		0

/* ワークエリア */
/* 雑用 4KB */
/* 物理メモリの空き管理(2KB+2KB+4KB) */
/* リニアアドレス → 64bitアドレス 4KB */
/* 64bitアドレス → 物理アドレス 16KB */

/* 暫定アドレスマップ */
/*
	0GB〜 4GB : 実メモリのためにリザーブ
	4GB〜 8GB : フラグメンテーション用領域
	8GB〜12GB : フロッピーディスク(1メディアで2MB)
	8EB〜16EB : 仮想メモリ。無尽蔵にある。
*/
/*
	仮想メモリの一部がメモリにロードされる
	はがされるまでストアしない。
	メモリが分断されるという問題はある。
*/

/* 暫定的な仕様で、16TBまでをサポート */
/* 仮想メモリは、8TB〜 */

struct area_man_struct_sub {
	unsigned int size;
	unsigned int addr;
};

struct area_man_struct {
	char res0[8];
	unsigned int use, size0; // 単位はバイト
	void [16];
	area_man_struct_sub data0, data[0];
	/* use < size0 は常に成立する */
	/* data[use]は-1,-1を指す */
	/* data0は番兵0,0 */
};

struct AAC_Node {
	unsigned int len, index, data, [4];
	/* index == 0xffffffff, len == 0は使えない */
	/* indexの有効範囲は、[1,0xfffffffe) */
	/* 0が使えないのは痛いから、indexに+1してから呼び出せばいいだろう */
};

struct AAC_Head {
	int limit, last, [8];
	AAC_Node head, node[0];
	/* limitは領域範囲外の最初のバイトを指す */
};

struct WORK {
	void [4096];
//	int debug;
	area_man_struct mem20_man[2048];
	area_man_struct mem24_man[2048];
	area_man_struct mem32_man[4096];
	AAC_Head linear_addr64[4096];
	AAC_Head addr64_addrp[16384];
};

void near mapping();
void near map_sub();
void near unmapping();
void near init_areastr();
void near count_free();
void near get_area();
void near free_area();
void near init_AAChead();
void near AAC_convert();
void near AAC_regist();
void near AAC_cancel();
void near free_memory();

void far PAPI_syscmd()
/* PAPIコマンド受け付け
   これは、かならずlv0から呼ばれる */
{
	unsigned int Init_sel     ==  2 * 8, TAPI_sel   == 12 * 8;
	unsigned int pdepte_sel   == 14 * 8, idtgdt_sel    == 15 * 8;
	int *cmd == FS:EBX;
	WORK *work == DS:0;

	PUSHAD();
	MOV(EAX, CS);
	PUSH(DS);
	EAX += 8;
	DS = EAX;
nextcmd:
	EAX = *cmd;
	if (EAX == 0)
		goto cmd0000;
	if (EAX == 0x0100)
		goto cmd0100; /* 初期化 */
	if (EAX == 0x0104)
		goto cmd0104; /* PageFaultハンドラ */
	if (EAX == 0x0108)
		goto cmd0108; /* mapping */
	if (EAX == 0x010c)
		goto cmd010c; /* unmapping */
	if (EAX == 0x0110)
		goto cmd0110; /* 利用可能物理メモリ通知(free_memory) */
	if (EAX == 0x0114)
		goto cmd0114; /* 物理メモリ取得(ページ単位・連続・アライン指定可) */
	if (EAX == 0x0118)
		goto cmd0118; /* delete pages */

	INT(0x03);

cmd0000:
	POP(DS);
	[SS:ESP + 16] = EBX;
	POPAD();
	return;

cmd0100:
	/* 初期化 */
	/* cmd, opt, reserve0, reserve1 */
	(offset) cmd += 16;
	EDX = 0;
	EAX = 0;
	EDX--;
	LEA(ESI, (int) work->mem20_man);
	ECX = 2048 - 40;
	init_areastr();
	LEA(ESI, (int) work->mem24_man);
	ECX = 2048 - 40;
	init_areastr();
	LEA(ESI, (int) work->mem32_man);
	ECX = 4096 - 40;
	init_areastr();
	LEA(ESI, (int) work->linear_addr64);
	ECX = 4096;
	init_AAChead();
	LEA(ESI, (int) work->addr64_addrp);
	ECX = 16384;
	init_AAChead();

#if (DEBUG)
PUSHAD();
EAX = 0;
EBX = 0;
EAX--;
ECX = 4096 / 4;
do {
	[DS:EBX] = EAX;
	EBX += 4;
	ECX--;
} while (!= 0);
POPAD();
#endif

	goto nextcmd;

cmd0104:
	asmout("MOV DWORD PTR FS:[EBX+4],OFFSET PageFaultHandler");
	(short) cmd[8] = CS;
	(offset) cmd += 12;
	goto nextcmd;

cmd0108:
	/* mapping */
	/* cmd, opt, size, linear, pageset, offset64, addr64(start or link) */

	EAX = cmd[ 4];
	TEST(EAX, 0x1000); /* over-mapping */
	if (!= 0) {
		ECX = cmd[ 8]; /* size */
		EAX = cmd[12]; /* linear */
		ECX += 4095;
		(unsigned int) EAX >>= 12;
		(unsigned int) ECX >>= 12;
		EAX++;
		LEA(ESI, (int) [work->linear_addr64]);
		AAC_cancel();
	}
	if (cmd[32] == 0) {
		PUSH(DS);
		PUSH(pdepte_sel);
		POP(DS);
		ECX = cmd[ 8]; /* size */
		EDX = cmd[12]; /* linear */
		EAX = cmd[28];
	//	if (ECX != 0) {
			ESI = cmd[ 4] /* opt(bit0〜11はページ属性) */;
			EAX += cmd[20];
			ESI &= 0xfff;
			EAX |= ESI;
//if ((unsigned) EAX >= 0x00800000) {
//if (ECX != 0x00100000)
//INT(0x03);
//}
			mapping();
	//	}
		EAX = cmd[ 4];
		TEST(EAX, 0x1000); /* over-mapping */
		if (!= 0) {
			EAX = CR3;
			CR3 = EAX;
		}
		(offset) cmd += 36;
		POP(DS);
		goto nextcmd;
	}

#if 0
	/* 適当にget_memoryして、貼り付ける */
	ECX = cmd[ 8]; /* size */
	EDX = cmd[12]; /* linear */
	LEA(ESI, (int) work->mem20_man);
	get_area();
	ESI = pdepte_sel;
	EAX |= 0x007;
	PUSH(DS);
	DS = SI;
	mapping();
	EAX = cmd[ 4];
	TEST(EAX, 0x1000); /* over-mapping */
	if (!= 0) {
		EAX = CR3;
		CR3 = EAX;
	}
	(offset) cmd += 36;
	POP(DS);
	goto nextcmd;
#endif

	EAX = cmd[12 /* linear */];
	EDX = cmd[28 /* addr64 */];
	ECX = cmd[ 8 /* size */];
	ESI = cmd[32 /* addr64(high) */];
	(unsigned int) EAX >>= 12;
	SHRD(EDX, ESI, 12);
	(unsigned int) ECX >>= 12;
	EAX++; /* linearで0は使いうるから */
	LEA(ESI, (int) [work->linear_addr64]);
//	if (ECX != 0) {
		AAC_regist();
		PUSH(DS);
		PUSH(pdepte_sel);
		POP(DS);
		ECX = cmd[ 8]; /* size */
		EDX = cmd[12]; /* linear */
		unmapping();
		POP(DS);
//	}
	(offset) cmd += 36;
	goto nextcmd;

cmd010c:
	/* unmapping */
	/* cmd, opt, size, linear, pageset */

	PUSH(DS);
	PUSH((int) pdepte_sel);
	POP(DS);
	ECX = cmd[ 8]; /* size */
	EDX = cmd[12]; /* linear */
	unmapping();
	POP(DS);
	ECX = cmd[ 8]; /* size */
	EAX = cmd[12]; /* linear */
	ECX += 4095;
	(unsigned int) EAX >>= 12;
	(unsigned int) ECX >>= 12;
	EAX++;
	LEA(ESI, (int) [work->linear_addr64]);
	AAC_cancel();
	(offset) cmd += 20;
	goto nextcmd;

cmd0110:
	/* free_memory */
	ECX = cmd[ 8];
	EAX = cmd[12];
	(offset) cmd += 16;
PUSHFD();
CLI();
	TEST(EAX, 0xff000000);
	/* ESI = (offset) work->mem32_man; */ LEA(ESI, (int) work->mem32_man);
	if (== 0) {
		TEST(EAX, 0xfff00000);
		/* ESI = (offset) work->mem24_man; */ LEA(ESI, (int) work->mem24_man);
		if (== 0)
			/* ESI = (offset) work->mem20_man; */ LEA(ESI, (int) work->mem20_man);
	}

#if (DEBUG)
PUSH(ECX);
PUSH(EAX);
(unsigned int) EAX >>= 12;
(unsigned int) ECX >>= 12;
do {
	BTR([DS:0], EAX);
	if (CF == 0)
		INT(0x03);
	EAX++;
	ECX--;
} while (!= 0);
POP(EAX);
POP(ECX);
#endif

	free_area();
POPFD();
	goto nextcmd;

cmd0114:
	/* 物理メモリ取得(連続) */
PUSHFD();
CLI();
	EAX = cmd[12];
	ECX = cmd[ 8];
	if (EAX == 0)
		goto cmd0114_get32;
	if (EAX == 1)
		goto cmd0114_get24;
	if (EAX == 2)
		goto cmd0114_get20;
	if (EAX == 0x80000001)
		goto cmd0114_special;
	if (EAX == 0x80000101)
		goto cmd0114_specialcheck;
	if (EAX == 0x800000ff)
		goto cmd0114_specialreport;

	INT(0x03);

cmd0114_get32:
	/* ESI = (offset) work->mem32_man; */ LEA(ESI, (int) work->mem32_man);
	get_area();
	if (ZF == 1) {
cmd0114_get24:
		/* ESI = (offset) work->mem24_man; */ LEA(ESI, (int) work->mem24_man);
		get_area();
		if (ZF == 1) {
cmd0114_get20:
			/* ESI = (offset) work->mem20_man; */ LEA(ESI, (int) work->mem20_man);
			get_area();
			if (ZF == 1)
				INT(0x03);
		}
	}

#if (DEBUG)
PUSH(ECX);
PUSH(EAX);
(unsigned int) EAX >>= 12;
(unsigned int) ECX >>= 12;
do {
	BTS([DS:0], EAX);
	if (CF == 1)
		INT(0x03);
	EAX++;
	ECX--;
} while (!= 0);
POP(EAX);
POP(ECX);
#endif

POPFD();
	cmd[16] = EAX;
	(offset) cmd += 20;
	goto nextcmd;

cmd0114_special:
	/* special command */
	work->mem24_man.data[0].addr += ECX;
	work->mem24_man.data[0].size -= ECX;
	if ((unsigned) <= 0) {
		EAX = 0;
		work->mem24_man.use -= sizeof (area_man_struct_sub);
		EAX--;
		work->mem24_man.data[0].addr = EAX;
		work->mem24_man.data[0].size = EAX;
	}
	(offset) cmd += 16;
POPFD();
	goto nextcmd;

cmd0114_specialcheck:
	EAX = 0;
	if ((unsigned) work->mem24_man.data[0].size >= 0x00e00000)
		EAX |= 0x01;
POPFD();
	cmd[16] = EAX;
	(offset) cmd += 20;
	goto nextcmd;

cmd0114_specialreport:
	area_man_struct