/* "init.ask" ver.4.0 copyright(C) 2004 H.Kawai(川合秀実), I.Tak., KIYOTO */

/* プリプロセッサのオプションで、-DPCATか-DTOWNSを指定すること */

#define KROM  /* shellcall2にcmd0100を追加。漢字ROM→GAPIデータデコード */

#define	MAXWINDOW		80	/* 1024/32 */
#define	CALLFAR0(sel)	CALL(sel, 0)

/* 64タスクまでの準備はできている */

//	#define	CHECK_TSKPTR	1

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

/* for debug */
void putstr();
void dumpreg();

#if (defined(TOWNS) && defined(CLGD543X))
	void clgd543XSetup();
	void clgd543XDetect();
#endif

#ifdef BOCHS
//	#define DEBUG031127		1
#endif

struct SS0_struct {
	void [32];
	char ring0_count, [3];
	/* void * */ int [4], ring0call[6], [2];
	char cli_count, [3];
	/* void * */ int [4], cli_call[6], [2];
};

void testmemory();
void init_areastr();
void ui32toa();
void ui8toa();
void output_string();
void initmalloc();
void set_modulesegment();
// void far KeyboardMdl::keyboardInit();
// void far KeyboardMdl::KeyboardIntDrv();
void get_area();
void free_area();
void create_task();
void get_memory();
void free_memory();
void alloc_memory();
void alloc_tagdir();
void add_tags();
void regist_module();
void search_tag_EAX();
void delete_directory();
void delete_binmodule();
void memcopy16();
void disable_diskcache();
void get_virtual();
void free_virtual();
void free_memory64();
void put_int_status_ec();
void put_int_status();

struct area_man_struct_sub {
	unsigned int size;
	unsigned int addr;
};

struct area_man_struct {
	char res0[8];
	unsigned int use, size0; // 単位はバイト
	void [16];
	area_man_struct_sub data0, data[0];
	/* use < size0 は常に成立する */
	/* data[use]は-1,-1を指す */
	/* data0は番兵0,0 */
};

struct resource_bitmap_struct {
	int len;
	int bitmap[0];
	/* bitmap[len - 4]は0(terminator) */
	/* 全サイズ(bytes) * 8 - 64 [個]の管理ができる */
};

struct GUIGUI_window_struct { // 計32bytes
	int status, win_id_task, signal_base, msgbox;
	int x_size, y_size, x0, y0;
};

struct GUIGUI_work { /* SS:0xffffd000; */
	void [1024];
	area_man_struct linear_man[1024];
	area_man_struct dummy_man[1024];
	void [512];
	int infobuf[128];
	void [108];
	unsigned int v86irq_ofs, v86irq_sel;
	unsigned char v86flag, [3];
	unsigned int timer_sec4, root_Paddr;
	unsigned int dosload_phase, dosload_work[16];
	unsigned int diskcache_Laddr, diskbuf_Paddr, diskbuf_Laddr;
	unsigned int cacheflags[64 /* 2MB分 */];
	unsigned int track[20 /* 160トラック分 */];
	unsigned int tapiwork_Laddr, tapiwork_Paddr;
	resource_bitmap_struct tapiwork_man[32];
	unsigned int root_size, root_addr;
	unsigned int setvideomode_mode, setvideomode_sig[12];
	unsigned int TAPI_sendmsgofs, TAPI_sendmsgsel;
	unsigned int cmd0100_buf[64];
	unsigned int timer_freq;
	/* 0xffffe000〜0xfffff200 */
	area_man_struct virtual_man[2048];
	GUIGUI_window_struct winlist[1024], [1024], [512];
};

struct TAPI_TSS386 {  /* 全てTL-0 */
	short BackLink, [2];
	int stack0_ESP; short stack0_SS, [2];
	int stack1_ESP; short stack1_SS, [2];
	int stack2_ESP; short stack2_SS, [2];
	int CR3;
	int EIP;
	int EFLAGS;
	int EAX, ECX, EDX, EBX;
	int ESP, EBP, ESI, EDI;
	short ES, [2], CS, [2], SS, [2];
	short DS, [2], FS, [2], GS, [2];
	short LDTR, [2], TaskFlags, IOBitMap;
	/* 合計104bytes */
};

struct TAPI_GlvPrm { /* 計64bytes */
	int run[12];
//	struct Tss near *Pointer;
	int pointer;
	int totalIlv; // +0x10
	int tasks;
	int MinIlv, MaxIlv;
	char flags; /* フラグによっては、Ilvを考慮しない。 */
	/* bit0:Ilv変更フラグ(0で変更あり)、bit1:時分割抑制フラグ(1で抑制)。 */
	void [31];
};

struct TAPI_LlvPrm { // 32bytes
	int run[12];
	int Glv;
	int short_run[12]; /* 0x10〜0x1b  0x1bが-1なら、invalid */
	int Ilv;
};

struct TAPI_TSS {
	TAPI_TSS386 tss386;  /* TL-0ブロック(104bytes) */

	/* system-signal処理のブロック(24bytes) */
	int sysbox_write_free, sysbox_write_ptr, sysbox_write_ptr0, sysbox_write_ptr1;
	int sysbox_read_ptr;
	unsigned char msgbox_status, softint_nest, [2];
		// bit0 : buffer write overrun
		// bit6 : sysbox empty(0:empty)
		// bit7 : msgbox empty(0:empty)

	int set[12], tr[4], run[12], ldt_img; /* TL-1ブロック(48bytes) */
	int fpu_reg_img, sse_reg_img /* for SSE & SSE2 */;
//	TAPI_TSS near *back, near *next;
	int back, next;

	int softint_EIP /* +0x00b0 */; short softint_CS; /* signal処理のブロック(48bytes) */
	short softint_oldCS;
	int softint_oldEIP;
	unsigned char softint_Llv, sysint_Llv /* このフィールドは使わない。softintと共通 */, now_Llv, softint_oldLlv;
	int msgbox_write_free, msgbox_write_ptr, msgbox_write_ptr0, msgbox_write_ptr1;
	int msgbox_eom_code, msgbox_rewind_code, [8];

/*	softint_oldLlvは、スタックにつむと0xffに変化する...で、0xffのときに、ストアされる
	softint_CS == 0のとき、CS:EIPの変化無し
	softint_Llv == 0のとき、Llvの変化無し */

/* TL-2ブロック 32bytes */
//	GlvPrm near *Glv /* +0x00e0 */; /* TapiWorkSelの中のオフセット */
//	LlvPrm near *Llv; /* TapiWorkSelの中のオフセット */
	int Glv, Llv; // 0xe0〜0xe7
	int Ilv, Llv_base; // Inner-level
	int short_run[12]; // +0x00f0
	char flags, [3];  /* Setの再評価要求フラグ */


/* このタスクの全実行時間は、runではない。runは、現在のLlvのrunningタイムを示しているに過ぎない。 */
/* 現在のLlvのLlvPrm.runは無効。 */

};

/* タスクごとの4KBの使い道 */
/*	(最初の1KB)
	TAPI_TSS			0.25KB
	LlvPrm				0.25KB(8lv)
	未使用				 64bytes
	メッセージボックス   64bytes
	FPUレジスタイメージ	108bytes
	システム管理用		 20bytes (+748)
	  tskdir, stack0_size, stack0_addr, stack3_size, stack3_addr
		↑これらは、リニアアドレスをはがすために記憶している。今は一続きなのでstack3は使っていない。
	未使用(SSE用)		0.25KB
	(残りの3KB)
	msgbuf				0.50KB
	sysbuf				0.50KB
	ldt_img				1.00KB
	slot_img			1.00KB
*/

/* リニアアドレスマップ */
/*	0MB〜1MB : 20bitメモリ空間と対応
	1MB〜3MB : ディスクキャッシュ管理用
	3MB〜4MB : プロテクトメモリチェック
				20bitメモリからの転送用マップ領域

	4.5MB〜20MB : 第一リニアアドレス
	20MB〜64MB : 第二リニアアドレス
*/

/* 物理アドレスマップ */
/* 	0MB〜1MB : 20bitメモリ
	1MB〜0x267fff : ディスクキャッシュ
	2.41MB〜 : フリー
*/

struct GUIGUI_codeheader { /* 32bytes */
	void [8]; /* for jmp-vector */
	char signature[8]; /* 'GUIGUI00' */
	int stack3_size, stack3_reserve, [8];
	/* reverveのbit0:
		0:reserve、stackの順
		1:stack、reserveの順(通常) */
};

void far Init()
/* 進入条件：
   DS == syswork_seg, GS == IDT&GDT_seg (どちらもセレクタではないことに注意が必要) */
{
	STR_SYSWORK *swork_DS == DS:0;
	STR_SYSWORK *swork_ES == ES:0;
	STR_SYSWORK *swork_GS == GS:0;

	SS0_struct *stack_ESP0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;

	/* GDTを作るための関数を用意した方がいいかもしれない
	   GS:EBXに書き込む。EDXはベース、ECXはサイズ、AXはアクセスライト
	   GS:EBX以外は破壊 */

//	EAX = 0xc092 /* unit:page, use32, lv0, RW */;
//	ECX = 0; /* 0は0x100000000を意味する */
//	EDX = 0x00000000;
//	EBX = 384 /* IDTの分 */ + SEL_ALL;
//	set_modulesegment();

	#if (defined(PCAT))
		EAX = 0x4092 /* unit:byte, use32, lv0, RW */;
		ECX = 0x00010000; /* 64KB */
		EDX = 0x000a0000;
		EBX = 384 /* IDTの分 */ + SEL_VRAM;
		set_modulesegment();
	#endif

	#if (defined(NEC98))
	//	AL = 0x06; // ch2のマスクをセット
	//	OUT(0x0015, AL);
		EDX = 0x0439;
		IN(AL, DX);
		AL &= 0xfb;
		OUT(DX, AL); /* DMAのA20-A23有効 */
	//	AL = 0x06; /* 1MB境界, ch2 */
	//	OUT(0x0029, AL);
	//	EDX = 0x0e09;
	//	AL = 0;
	//	OUT(DX, AL); /* ch2のA31-A24 = 0 */
		EAX = 0x4092 /* unit:byte, use32, lv0, RW */;
		ECX = 0x00040000; /* 256KB */
		EDX = 0x000a8000;
		EBX = 384 /* IDTの分 */ + SEL_VRAM;
		set_modulesegment();
	#endif

	/* tapiコールの支障にならないように、ダミーセレクタを作る */
	EAX = 0xc092 /* unit:page, use32, lv0, RW */;
	ECX = 0; /* 0は0x100000000を意味する */
	EDX = 0x00000000;
	EBX = 384 /* IDTの分 */ + SEL_TAPIWORK;
	set_modulesegment();

	#if (defined(CHECK_TSKPTR))
		EAX = swork_DS->alloclist[ENT_TAPIWORK + 12];
		EAX += 0x000c;
		asmout("MOV DR0,EAX");
		EAX = 0;
		asmout("MOV DR6,EAX");
		asmout("MOV EAX,1000000010B+1101B*10000H");
			/* GE = G0 = 1; LEN0 = 3 (DW); RW0 = 01 (write only); */
		asmout("MOV DR7,EAX");
	#endif

	#if 0
		EAX = swork_DS->alloclist[ENT_TAPIWORK + 12];
		EAX += 28;
		asmout("MOV DR0,EAX");
		EAX = 0;
		asmout("MOV DR6,EAX");
		asmout("MOV EAX,1000000010B+1101B*10000H");
			/* GE = G0 = 1; LEN0 = 3 (DW); RW0 = 01 (write only); */
		asmout("MOV DR7,EAX");
	#endif

	#if 0
		EAX = 0x480000 + 0x2d20 + 28;
		asmout("MOV DR0,EAX");
		EAX = 0;
		asmout("MOV DR6,EAX");
		asmout("MOV EAX,1000000010B+1101B*10000H");
			/* GE = G0 = 1; LEN0 = 3 (DW); RW0 = 01 (write only); */
		asmout("MOV DR7,EAX");
	#endif

	/* スタックも切り替わっていない。 */
	/* システムスタックを押し上げて、メモリ、TAPIwork、GDTの管理ブロックを作る。 */

//	EAX = SEL_STACK;
	EDX = 0;
//	SS = EAX;
//	ESP = /* (offset) stack_ESP0 */ 0xffffd000; /* スタックの初期化 */
	EDX -= 0x80; /* EDX = 0xffffff80; */
	(int) stack_ESP0->ring0_count = EDX /* 0xffffff80 */;
	(int) stack_ESP0->cli_count   = EDX /* 0xffffff80 */;

	GUIGUI_work *work == SS:0xffffd000;
	area_man_struct *areastrEBP == SS:EBP;
//	EDX = 0;
	EAX = 0;
//	EDX--;
	EDX += 0x7f; /* EDX = 0xffffffff; */
	/* EBP = (offset) work->virtual_man; */ LEA(EBP, (int) work->virtual_man);
	ECX = 2048 - 40;
	init_areastr();
//	/* EBP = (offset) work->mem24_man; */ LEA(EBP, (int) work->mem24_man);
//	ECX = 512 - 40;
//	init_areastr();
//	/* EBP = (offset) work->mem20_man; */ LEA(EBP, (int) work->mem20_man);
///	ECX = 512 - 40;
//	init_areastr();
	/* EBP = (offset) work->linear_man; */ LEA(EBP, (int) work->linear_man);
	ECX = 1024 - 40;
	init_areastr();

	ECX = 0;
	PUSH(SEL_SYSWORK);
	POP(ES);
	DL = [ES:ECX + 0x001c + 2 /* eflags[2] */];

	PUSH(SS);
//	ECX = 0;
	ESI = 0x0108;
	POP(FS);

	/* PAPI初期化 */
	PUSH((int) ECX /* eoc */);
	PUSH(ECX);
	PUSH(ECX);
	PUSH(ECX);
	PUSH(0x0100 /* init cmd */);
	EBX = ESP;
	CALLFAR0(SEL_PAPI);
	ESP += 20 - 4; /* eocが残っている */

	#if (defined(PCAT))
		EAX = 0x1007 /* present, R/W, user, override */;
		TEST(DL, 0x04);
		if (!= 0)
			AL = 0x1f /* VRAMはキャッシュしない(PCD=1) */;

	//	ECX = 0;
	//	PUSH((int) ECX /* eoc */);

		/* mapping PC-Card Window (0xac000000〜0xac3fffff) */
		PUSH((int) ECX /* addr64(high) */);
		PUSH((int) 0xac000000 /* addr64(low) */);
		PUSH((int) ECX /* offset64(high) */);
		PUSH((int) ECX /* offset64(low) */);
		PUSH((int) ECX /* pageset */);
		PUSH((int) 0xac000000 /* linear */);
		PUSH((int) 4 * 1024 * 1024 /* size */);
		PUSH((int) EAX /* opt(PCD, present, R/W, user, override) */);
		PUSH((int) ESI /* cmd(mapping) */);

		/* mapping BIOS (for VESA call) (0x000c0000〜0x000fffff) */
		/* mapping high memory (0x00100000〜0x002fffff) */

	//	PUSH((int) ECX /* addr64(high) */);
	//	PUSH((int) 0x000c0000 /* addr64(low) */);
	//	PUSH((int) ECX /* offset64(high) */);
	//	PUSH((int) ECX /* offset64(low) */);
	//	PUSH((int) ECX /* pageset */);
	//	PUSH((int) 0x000c0000 /* linear */);
	//	PUSH((int) 2304 * 1024 /* size(128K + 2M) */);
	//	PUSH((int) 0x0007 /* opt(present, R/W, user) */);
	//	PUSH((int) ESI /* cmd(mapping) */);

		/* mapping VRAM (0x000a0000〜0x000bffff) & PC-card window & BIOS */
		/* (0x000a0000〜0x000fffff) */

		PUSH((int) ECX /* addr64(high) */);
		PUSH((int) 0x000a0000 /* addr64(low) */);
		PUSH((int) ECX /* offset64(high) */);
		PUSH((int) ECX /* offset64(low) */);
		PUSH((int) ECX /* pageset */);
		PUSH((int) 0x000a0000 /* linear */);
		PUSH((int) 384 * 1024 /* size */);
		PUSH((int) EAX /* opt(PCD, present, R/W, user, override) */);
		PUSH((int) ESI /* cmd(mapping) */);

		EBX = ESP;
		CALLFAR0(SEL_PAPI);
		ESP += 36 + 36; /* eocが残っている */
	#elif (defined(TOWNS))
		EBX = 0x80100000;
		IN(AX, 0x0030); /* CPU識別レジスタ */
		AL &= 0x07;
		CMP(AL, 0x03);
		if (==) /* i386SX */
			EBX = 0x00b00000;
		TEST(DL, 0x04);
		EAX = 0x07 /* present, R/W, user */;
		if (!= 0)
			AL = 0x1f /* VRAMはキャッシュしない(PCD=1) */;

	//	ECX = 0;
	//	PUSH((int) ECX /* eoc */