// "keymos0.ask" ver.0.6 copyright(C) 2002 H.Kawai(川合秀実)

// このバージョンもOTASK版と同じく、キーを押しながら抜くとフェーズが狂う

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

struct keyboarddata {
	int send_buf[64]; // 0x00
	int pushflags[64]; // 0x40
	int queue_buf[128]; // 0x80 (dw数:32...ブロックは最高でも8dw程度に)
	int mouse_queue_buf[128]; // 0x100
	int keysignal[6], [2]; // 0x180
	/* void near * */ int keyjmp; // 0x188
	int mousejmp;
	unsigned int queue_free_dw, queue_write_ptr; // 0x190, 0x194
	unsigned int queue_exec_ptr, exec_wait_int;  // 0x198, 0x19c
	unsigned int mouse_queue_free_dw, mouse_queue_write_ptr; // 0x1a0, 0x1a4
	unsigned int mouse_queue_exec_ptr, mouse_exec_wait_int;  // 0x1a8, 0x1ac
	int mousesignal[6], [2]; // 0x1b0
	int keyerr_signal[6], [2]; // 0x1b8
	int mouse_send_buf[64]; // 0x1c0
	int err_send_buf[64]; // 0x200
//	int mouse_x, mouse_y;
//	unsigned char led;
};

struct SS0_struct {
	void [32];
	char ring0_count, [3];
	/* void * */ int [4], ring0call[6], [2];
	char cli_count, [3];
	/* void * */ int [4], cli_call[6], [2];
};

void near keyboardInit();
void near KeyboardQueueExecute();
void near MouseQueueExecute();
void near KeyIntDrv_Normal();

void far keyboard_syscmd()
{
	int *cmd == FS:EBX;

	PUSHAD();
	MOV(EAX, CS);
	PUSH(DS);
	EAX += 8;
	DS = AX;
nextcmd:
	EAX = *cmd;
	if (EAX == 0)
		goto cmd0000;
	if (EAX == 0x0108)
		goto cmd0108; // KeySetLed
	if (EAX == 0x0120)
		goto cmd0120; // MouseEnable
	if (EAX == 0x0104)
		goto cmd0104; // KeyboardReset
	if (EAX == 0x011c)
		goto cmd011c; // MouseReset
	if (EAX == 0x0114)
		goto cmd0114; // SetFinishSignal
	if (EAX == 0x0110)
		goto cmd0110; // connect Decoder
	if (EAX == 0x0118)
		goto cmd0118; // KeyEnableA20
	if (EAX == 0x0100)
		goto cmd0100; // 初期化
	if (EAX == 0x010c)
		goto cmd010c; // KeyResetCPU
	if (EAX == 0x0124)
		goto cmd0124; // KeyboardIntDrvのベクタ提供
	if (EAX == 0x0128)
		goto cmd0128; // MouseIntDrvのベクタ提供
	if (EAX == 0x0018)
		goto cmd0018; // バージョン要求

	INT(0x03);

cmd0000:
	POP(DS);
	[SS:ESP + 16] = EBX;
	POPAD();
	return;

cmd0100:
	// 初期化
	PUSH((offset) cmd);
	keyboardInit();
	POP((offset) cmd);
	(offset) cmd += 4;
	goto nextcmd;

cmd0104:
	// KeyboardReset
#if 1
	PUSH(FS);
	PUSH((offset) cmd);
	MOV(EAX, CS);
	FS = AX;
	/* EBX = (offset) cmd0104_cmdline */ asmout("MOV EBX,OFFSET #cmd0104_cmdline");
	KeyboardQueueExecute();
	POP((offset) cmd);
	POP(FS);
#endif
	(offset) cmd += 4;
	goto nextcmd;

// 本来なら、CFもチェックしなくてはいけないし、
// 正常終了割り込みも発行すべき

	ALIGN(4);

cmd0104_cmdline:

// 本来は、最初にタイムアウトを仕掛けて、バッファを吐かせるべき

//	DD(11-4-4);
//	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,0AAH");  // controller self test
//	asmout("DD OFFSET KeyQueCmd_RecieveCheck,055H"); // test successful code.
//	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,0ABH");  // keyboard interface test (Gateway SOLO2150では、これで引っかかる)
//	asmout("DD OFFSET KeyQueCmd_RecieveCheck,000H"); // test successful code.
//	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,0AEH");  // keyboard interface enable

	DD(9 - 4);
	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
	asmout("DD OFFSET KeyQueCmd_AckSendData,0FFH"); // keyboard reset
		// ↑このコマンドがタイムアウトしたら、キーボードはつながっていない
	asmout("DD OFFSET KeyQueCmd_RecieveCheck,0AAH"); // power on reset(reset成功)
//	asmout("DD OFFSET KeyQueCmd_AckSendData,0F5H");  // keyboard disable scanning
//	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,060H");  // write mode command
//	DD(6);
//	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET KeyQueCmd_SendData,065H"); // 01100101b
		// IRQ01 enable, IRQ12 disable, system flag on, keylock enable
		// keyboard interface enable, mouse interface disable, scan code 1(PC format)
//	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET KeyQueCmd_AckSendData,0F4H"); // enable scanning

	DD(0);

cmd0108:
	// KeySetLed
	EAX = cmd[4];
	PUSH(FS);
	PUSH((offset) cmd);
	MOV(ECX, SS);
	ESP -= 28;
	FS = CX;
	unsigned int *led_cmds == SS:ESP;
	led_cmds[0] = 5;
	asmout("MOV DWORD PTR SS:[ESP+4],OFFSET KeyQueCmd_WaitBufEnpty");
	/* led_cmds[ 4] = (offset) KeyQueCmd_AckSendData */ asmout("MOV DWORD PTR SS:[ESP+8],OFFSET KeyQueCmd_AckSendData");
	/* (char) led_cmds[ 8] = 0xed */ asmout("MOV BYTE PTR SS:[ESP+12],0EDH");
	/* led_cmds[12] = (offset) KeyQueCmd_AckSendData */ asmout("MOV DWORD PTR SS:[ESP+16],OFFSET KeyQueCmd_AckSendData");
	/* (char) led_cmds[16] */ [led_cmds + 20] = AL;
	led_cmds[24] = 0;
	EBX = ESP;
	KeyboardQueueExecute();
	ESP += 28;
	POP((offset) cmd);
	POP(FS);
	(offset) cmd += 8;
	goto nextcmd;

cmd010c:
	// KeyResetCPU
	PUSH(FS);
	PUSH((offset) cmd);
	MOV(EAX, CS);
	FS = AX;
	/* EBX = (offset) cmd010c_cmdline */ asmout("MOV EBX,OFFSET #cmd010c_cmdline");
	KeyboardQueueExecute();
	POP((offset) cmd);
	POP(FS);
	(offset) cmd += 8; /* 2002.12.04 bugfix, skip opt */
	goto nextcmd;

// 本来なら、CFもチェックしなくてはいけないし、
// 正常終了割り込みも発行すべき

	ALIGN(4);

cmd010c_cmdline:

// 本来は、最初にタイムアウトを仕掛けて、バッファを吐かせるべき

	DD(3);
	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,0FEH"); // reset CPU
	DD(0);

// Bit 7  Keyboard data (output)    1
// Bit 6  Keyboard clock (output)   1
// Bit 5  Input buffer empty        0
// Bit 4  Output buffer full        1
// Bit 3  Reserved                  1
// Bit 2  Reserved                  1
// Bit 1  Gate A20                  1
// Bit 0  System Reset              0

cmd0110:
	// connect Decoder
	EAX = cmd[4];
	ECX = cmd[8];
	(int) [DS:0x0180] = EAX;
	(int) [DS:0x0184] = ECX;
	(offset) cmd += 12;
	goto nextcmd;

cmd0114:
	// SetFinishSignal
	MOV(EAX, SS);
	PUSH(FS);
	PUSH((offset) cmd);
	PUSH((int) 0);
	asmout("PUSH OFFSET KeyQueCmd_MakeFinishSignal");
	PUSH(cmd[16]);
	PUSH(cmd[12]);
	PUSH(cmd[ 8]);
	PUSH(cmd[ 4]);
	asmout("PUSH OFFSET KeyQueCmd_SetErrSignal");
	PUSH((int) 6);
	FS = AX;
	EBX = ESP;
	KeyboardQueueExecute();
	if (CF == 0) {
		ESP += 4 * 8;
		POP((offset) cmd);
		POP(FS);
		(offset) cmd += 20;
		goto nextcmd;
	}
	INT(0x03);

cmd0118:
	// KeyEnableA20
	MOV(EAX, CS);
	PUSH(FS);
	PUSH((offset) cmd);
	FS = AX;
	/* EBX = (offset) cmd0118_cmdline */ asmout("MOV EBX,OFFSET #cmd0118_cmdline");
	KeyboardQueueExecute();
	POP((offset) cmd);
	POP(FS);
	(offset) cmd += 4;
	goto nextcmd;

// 本来なら、CFもチェックしなくてはいけないし、
// 正常終了割り込みも発行すべき

	ALIGN(4);

cmd0118_cmdline:

// 本来は、最初にタイムアウトを仕掛けて、バッファを吐かせるべき

	DD(6);
	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,0D1H");
	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
	asmout("DD OFFSET KeyQueCmd_SendData,0DFH"); // enable A20 (0xddだとdisable)
	DD(0);

// Bit 7  Keyboard data (output)    1
// Bit 6  Keyboard clock (output)   1
// Bit 5  Input buffer empty        0
// Bit 4  Output buffer full        1
// Bit 3  Reserved                  1
// Bit 2  Reserved                  1
// Bit 1  Gate A20                  1
// Bit 0  System Reset              1

cmd011c:
	// MouseReset
	MOV(EAX, CS);
	PUSH(FS);
	PUSH((offset) cmd);
	FS = AX;
	/* EBX = (offset) cmd011c_cmdline */ asmout("MOV EBX,OFFSET #cmd011c_cmdline");
	MouseQueueExecute();
	POP((offset) cmd);
	POP(FS);
	(offset) cmd += 4;
	goto nextcmd;

// 本来なら、CFもチェックしなくてはいけないし、
// 正常終了割り込みも発行すべき

	ALIGN(4);

cmd011c_cmdline:

// 本来は、最初にタイムアウトを仕掛けて、バッファを吐かせるべき

//	DD(9);
//	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,060H");  // write mode command
//	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET KeyQueCmd_SendData,047H"); // 01000111b
		// IRQ01 enable, IRQ12 enable, system flag on, keylock enable
		// keyboard interface enable, mouse interface enable, scan code 1(PC format)
//	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,0A8H");  // mouse interface enable

	DD(2 /* 7 */);
	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET MouQueCmd_AckSendData,0FFH"); // mouse reset
		// ↑このコマンドがタイムアウトしたら、マウスはつながっていない
//	asmout("DD OFFSET MouQueCmd_RecieveCheck,0AAH"); // power on reset(reset成功 第1バイト)
//	asmout("DD OFFSET MouQueCmd_RecieveCheck,000H"); // power on reset(reset成功 第2バイト)
	asmout("DD OFFSET MouQueCmd_ResetCommand");

	DD(0);

cmd0120:
	// MouseEnable
	MOV(EAX, CS);
	PUSH(FS);
	PUSH((offset) cmd);
	FS = AX;
	/* EBX = (offset) cmd0120_cmdline */ asmout("MOV EBX,OFFSET #cmd0120_cmdline");
	MouseQueueExecute();
	POP((offset) cmd);
	POP(FS);
	(offset) cmd += 4;
	goto nextcmd;

// 本来なら、CFもチェックしなくてはいけないし、
// 正常終了割り込みも発行すべき

	ALIGN(4);

cmd0120_cmdline:

// 本来は、最初にタイムアウトを仕掛けて、バッファを吐かせるべき

	DD(3);
	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
//	asmout("DD OFFSET KeyQueCmd_WriteCmdReg,0D4H"); // to mouse prefix
//	asmout("DD OFFSET KeyQueCmd_WaitBufEnpty");
	asmout("DD OFFSET MouQueCmd_AckSendData,0F4H"); // mouse enable

	DD(0);

cmd0124:
	// KeyboardIntDrvのベクタ提供
	asmout("MOV DWORD PTR FS:[EBX+4],OFFSET KeyboardIntDrv");
	(short) cmd[8] = CS;
	(offset) cmd += 12;
	goto nextcmd;

cmd0128:
	// MouseIntDrvのベクタ提供
	asmout("MOV DWORD PTR FS:[EBX+4],OFFSET MouseIntDrv");
	(short) cmd[8] = CS;
	(offset) cmd += 12;
	goto nextcmd;

cmd0018:
	// バージョン要求
	// 本来は、cmd[4]が0であることを確認しなければいけない
	cmd[ 8] = 300; // ver.0.30
	cmd[12] = 0;
	cmd[16] = 0;
	cmd[20] = 0;
	(offset) cmd += 24;
	goto nextcmd;
}

void near keyboardInit()
// 本来ならこいつは１つのタスクとして起動する。
// LDTにシステムコール必要な全ての環境を持ち、
// セッティングが済んだら、スリープする。
// 汎用レジスタは、すべて破壊される
{
	unsigned int Init_sel     ==  2 * 8, TAPI_sel   == 12 * 8;

	// ASKAのフォローのための定数宣言
	asmout("work_send_buf EQU 0000H");
	asmout("work_pushflags EQU 0040H");
	asmout("work_queue_buf EQU 0080H");
	asmout("work_queue_buf_size EQU 0080H");
	asmout("work_mouse_queue_buf EQU 0100H");
	asmout("work_mouse_queue_buf_size EQU 0080H");
	asmout("work_mousejmp EQU 018CH");
	asmout("work_mouse_exec_wait_int EQU 01ACH");
	asmout("work_mousesignal EQU 01B0H");
	asmout("work_keyerr_signal EQU 01B8H");
	asmout("work_mouse_send_buf equ 01C0H");
	asmout("work_err_send_buf EQU 0200H");

//	PUSH(DS); // あらかじめ、mallocしてGDTに割り当てておく
//	PUSH(EAX);
//	PUSH(ECX);
//	AX = CS; AX += 8; DS = AX; // 特定のDSに依存しないための手続き

	keyboarddata *work == DS:0;
	int zero == EAX, i == ECX;
	zero = 0;
	i = 64 + 64 / 8; // ついでにpushflagsも初期化
	do {
		i--;
		/* work->send_buf[i * 8 + 0] = zero */ asmout("MOV DWORD PTR DS:[ECX * 8 + 0],EAX");
		/* work->send_buf[i * 8 + 4] = zero */ asmout("MOV DWORD PTR DS:[ECX * 8 + 4],EAX");
	} while (!= 0);

	/* work->keyjmp = KeyIntDrv_Normal; */ asmout("MOV DWORD PTR DS:[0188h],OFFSET KeyIntDrv_Normal");

//	/* work->keysignal[0] = keytest; */ asmout("MOV DWORD PTR DS:[0180h],OFFSET keytest");
//	/* work->keysignal[4] */ [work + 0x184] = CS;
//	asmout("MOV DWORD PTR DS:[0000H],000007F1H");
//	asmout("MOV DWORD PTR DS:[0004H],5");
//	asmout("MOV DWORD PTR DS:[0180H],OFFSET Keydecode_Main");
//	asmout("MOV DWORD PTR DS:[0184H],22*8");

	work->queue_free_dw = /* sizeof (work->queue_buf) */ 128 / 4 - 1 /* quecmd_tonormalの分 */;
	work->queue_write_ptr = /* (offset) work->queue_buf */ 0x80;
	work->queue_exec_ptr  = /* (offset) work->queue_buf */ 0x80;

	/* work->mousejmp = MouseIntDrv_Phase0; */ asmout("MOV DWORD PTR DS:[018CH],OFFSET MouseIntDrv_Phase0");

	PUSH(FS);
//	PUSH(EBX);
	PUSH((int) 0); // eoc
	PUSH(EAX);
	PUSH(EAX);
	PUSH(0x011c /* TAPI_SingnalMessageTimerベクタ要求 */);
	MOV(EAX, SS);
	EBX = ESP;
	FS = AX;
	DB(0x9a); DD(0); DW((short) TAPI_sel);
	POP(EAX);
	POP(work->mousesignal[0]);
	POP(work->mousesignal[4]);
	POP(EAX);
//	POP(EBX);
	POP(FS);

	/* work->mouse_send_buf[0] = 0x00003244 */ asmout("MOV DWORD PTR DS:[work_mouse_send_buf+0],3244H");
	/* work->mouse_send_buf[4] = 0x7f000003 */ asmout("MOV DWORD PTR DS:[work_mouse_send_buf+4],7F000003H");
	/* work->mouse_send_buf[8] = 0x73756f6d */ asmout("MOV DWORD PTR DS:[work_mouse_send_buf+8],73756F6DH");
	/* work->mouse_send_buf[12] = 0 */ asmout("MOV DWORD PTR DS:[work_mouse_send_buf+12],0");
//	/* work->mousesignal[0] = (offset) mousetest; */ asmout("MOV DWORD PTR DS:[work_mousesignal+0],OFFSET TAPI_SingnalMessageTimer");
//	/* work->mousesignal[4] */ [work + 0x1B4] = /* CS */ 12*8;
//	asmout("MOV DWORD PTR DS:[work_mousesignal+4],12*8");

	work->mouse_queue_free_dw = /* sizeof (work->mouse_queue_buf) */ 128 / 4 - 1 /* mouse_quecmd_tonormalの分 */;
	work->mouse_queue_write_ptr = /* (offset) work->mouse_queue_buf */ 0x100;
	work->mouse_queue_exec_ptr  = /* (offset) work->mouse_queue_buf */ 0x100;

	/* work->keyerr_signal[0] = (offset) dummy_fret */ asmout("MOV DWORD PTR DS:[work_keyerr_signal+0],OFFSET dummy_fret");
	/* work->keyerr_signal[4] = CS */ asmout("MOV WORD PTR DS:[work_keyerr_signal+4],CS");

//	POP(ECX);
//	POP(EAX);
//	POP(DS);
dummy_fret:
	asmout("dummy_fret: EQU $");
	return;
}

/*
	DS:ESIからの仕様(タイマー専用シグナル処理ルーチン使用時)。
	+00 : bit0-2 : メッセージdw数。最高7(28bytes)。
	      bit3   : eax, ecx, edxロード & CF = 1をやるかやらないか(1でやる)。
	      bit4-  : メッセージの送信先の指定に使う（シグナルポート）。
	+04 -	     : メッセージを書く

	DS:ESIからの仕様(汎用シグナル処理ルーチン使用時)。
	+00 : bit0-3 : メッセージdw数。最高15(60bytes)。
	      bit4-  : メッセージの送信先の指定に使う（シグナルポート）。
	+04 -	     : メッセージを書く

	一般には、メッセージ本体の最初の4バイトは、受け取ったルーチンが誰からのメッセージであるかを
	識別するのに使われる。ゆえに、キーコード値などは、+08に書き込まれる。
*/

void far KeyboardIntDrv()
{
#if 0
	struct SS0_struct {
		void [32];
		int ring0_count;
		/* void * */ int [4], ring0call[6], [2];
		int cli_count;
		/* void * */ int [4], cli_call[6], [2];
	};
#endif

	SS0_struct *ss0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;

	PUSH(DS);
	PUSH(EAX);
	MOV(EAX, CS); EAX += 8; DS = AX; // 特定のDSに依存しないための手続き
	ss0->ring0_count++; // 割り込みルーチンの基本
	ss0->cli_count++;
}

void near KeyboardIntDrv2()
{
	keyboarddata *work == DS:0;

// 先に割り込みを終了させてしまう(2000/05/29 データーを取りこぼすエラーがあったため)。
// 信号の立ち上がりが割り込みを起こすから、害はないだろう。
	AL = 0x61 /* IRQ-01を終了 */;
	OUT(0x20, AL);

	IN(AL, 0x60);
	asmout("JMP DWORD PTR DS:[0188H]"); // goto work->keyjmp;
}

void near KeyIntDrv_Normal()
{
	keyboarddata *work == DS:0;
	unsigned int keycode == EAX, keycode2 == ECX, keycode3 == EDX;
	/* (false) */ if (AL == 0xe0) {
		/* work->keyjmp = KeyIntDrv_E0byte; */ asmout("MOV DWORD PTR DS:[0188H],OFFSET KeyIntDrv_E0byte");
		goto fin;
	}
	/* (false) */ if (AL == 0xe1) {
		/* work->keyjmp = KeyIntDrv_E1byte; */ asmout("MOV DWORD PTR DS:[0188H],OFFSET KeyIntDrv_E1byte");
		goto fin;
	}
	/* (false) */ if (AL == 0xff) {
		keycode = 0x04000000;
		goto send_keycode;
	}

#if 0
if (AL == 0x01 /* ESC */) { // !!!
	// +00 : EAX
	// +04 : DS
	// +08 : EIP
	// +12 : CS
	// +16 : ELFAGS
	EAX = (int) [SS:ESP +  8];
	ECX = (int) [SS:ESP + 12];
	INT(0x03);
}
#endif

	MOVSX(keycode, AL); // EAX = AL;
	keycode &= 0x0100007f; // 00:make, 01:break

send_keycode:
	/* make/breakの場合は、remakeやoverbreakのチェックもする */
	asmout("KeyIntDrv_send_keycode: EQU $");
	PUSHAD();
	if (keycode < 0x02000000) {
		keycode2 = keycode;
		keycode3 = 0;
		keycode2 &= 0x1ff;
		/* (true) */ if (keycode < 0x01000000) {
			// make
			/* BTS(*(work->pushflags), keycode2) */ asmout("BTS DWORD PTR DS:[040H],ECX");
		} else {
			// break
			/* BTR(*(work-