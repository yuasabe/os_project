// "fdcdrv0.ask" ver.2.6 copyright(C) 2004 H.Kawai(川合秀実)

#include "osaskinc.ask"

/* とりあえず今のところは相変わらずFDからの起動を想定 */
/* フォーマットコマンドをFDモード以外で実行しないこと */

//	#define CFPOWERAUTOOFF	1

segment CODE(USE32, PARA);
default(code == CODE);

#define	ROOT_ENTRY0		0x102600	/* 1.44MBでは0x102600, 1.2MBでは0x101400 */
#define	ROOT_ENTRY1		0x104200	/* 1.44MBでは0x104200, 1.2MBでは0x102c00 */
#define	TRACK0_ADDR0	0x100000	/* 1.44MBでは0x100000, 1.2MBでは0x100000 */
#define	TRACK1_ADDR0	0x102400	/* 1.44MBでは0x102400, 1.2MBでは0x102000 */
#define FAT0_ADDR0		0x100200	/* 1.44MBでは0x100200, 1.2MBでは0x100400 */
#define FAT1_ADDR0		0x101400	/* 1.44MBでは0x101400, 1.2MBでは0x100c00 */
#define	FAT01_WBFS_BITS	0x0007fffe	/* 1.44MBでは0x0007fffe(1-18), 1.2MBでは0x0000001e(1-4) */
#define	SECTOR_BYTES	512			/* 1.44MBでは512, 1.2MBでは1024 */
#define	SYSTEM_SECTORS	31			/* 1.44MBでは31, 1.2MBでは9 */
#define	TOTAL_CLUSTERS	2849		/* 1.44MBでは2849(=2880-31), 1.2MBでは1223(=1232-9) */
#define	FAT_BYTES		4608		/* 1.44MBでは4608(=9*512), 1.2MBでは2048(=2*1024) */
#define	TOTAL_SECTORS	2880		/* 1.44MBでは2880, 1.2MBでは1232 */

#define	CARDBUS_POFF_TIMEOUT	4000000		/* 4GHzで2ms以上だろう */
#define CARDBUS_BASE0p			0x0ac0d000
#define CARDBUS_BASE10			0xac0d1000
#define CARDBUS_BASE18			0xac0d1800
#define CARDBUS_BASE24			0xac

struct FDC_WORK {
	int MC_ptr, MC_free, jmpvec_fdcint /* 0x0008 */;
	char motor, motor2 /* off待ちフラグ */, [2];
	int TimerCmd[8]; // 0x0010
	int timer_cmd0 /* メッセージセット (11 * 4) */, timer_node0, timer_msglen, timer_msg /* 0x0024 */; // 0x0018
	int timer_cmd1 /* 現在時刻セット (7 * 4) */, timer_node1; // 0x0028
	int timer_cmd2 /* 時刻加算 (8 * 4) */, timer_node2, time_add0, time_add4, time_add8; // 0x0030
	int timer_cmd3 /* ベクタセット (10 * 4) */, timer_node3, jmpvec_timer_EIP /* 0x004c */, jmpvec_timer_CS; // 0x0044
	int timer_cmd4 /* タイマー登録 (4 * 4) */, timer_node4; // 0x0054
	int timer_cmd5; // 0x005c
	int timer_cmd6 /* タイマー取り消し (5 * 4) */, timer_node5; // 0x0060
	int timer_cmd7; // 0x0068
	int wait0_0, wait0_4, wait0_8; /* モーターONにしてから、アクセスまでのウェイト(0x006c) */
	int wait1_0, wait1_4, wait1_8; /* 最後のアクセスから、アクセスまでのウェイト(0x0078) */
	char cylinder[4];
	int track[20], dosload_phase, dosload_name[12], dosload_addr; // 0x0088
	int dosload_sigtmp, dosload_sigfin, dosload_FAT, dosload_size0, dosload_size1; // 0x00b0
	int TAPI_sendsignalofs, TAPI_sendsignalsel; // 0x00c4
	int dostmp[32], ret_EIP, [16];

	/* 0x0100〜0x03ff : マイクロコマンドキュー(0.75KB)...192DW */

	/* 0x0400〜0x5ff */
	void [512];

 	/* 360バイトのフラグ領域が必要(dirty bits) */
	char WBF[4]; /* ドライブ単位 */
	int WBFS[360]; /* セクタ単位 */ /* 1.2MBでは160バイト, 1.44MBでは360バイト */

	int CFIDE_name[12], CFport, CFbaseLBA;
	char CFdev, CFerrflg, CFpower, CFdev2;
	int readsecs, writesecs, formatsecs, loadfat, cardbus; /* test4, test6, test5 */
	int PCCardDriveList[32], wait400count, BIOS_S, BIOS_H, [60];

	/* 0x0800〜0xfff */
	void [2048];
};

void FDC_Init();
void FDC_dosload();
void FDC_loadFAT_fd();
void FDC_loadFAT_cfide();
void FDC_format();
void FDC_writeIPL();
void FDC_format2();
void FDC_writeIPL2();
void FDC_writeIPL3();
void FDC_doswrite();
void check_WBF();
void FDC_deletefile();
void FDC_createfile();
void ready_track01();
void search_file();
void send_sigfin();
void FDC_renamefile();
void FDC_resizefile();
void FDC_writebackcache();
void save_dosname();
void save_dosname2();
void poweron();
void poweroff();
void close_all();
void open_cf();
void errorfile();
void PCC_reset();

/* 手抜き満載 */
void CFIDE_select();
void CFIDE_ataread();
void CFIDE_wait400ns();
void CFIDE_atawrite();

void far FDC_syscmd()
{
	FDC_WORK *work == DS:0;
	int *cmd == FS:EBX;

	PUSHAD();
	MOV(EAX, CS);
	PUSH(DS);
	EAX += 8;
	DS = AX;
nextcmd:
	EAX = *cmd;
	if (EAX == 0)
		goto cmd0000;
	if (EAX == 0x0114)
		goto cmd0114; // FDC_continue
	if (EAX =