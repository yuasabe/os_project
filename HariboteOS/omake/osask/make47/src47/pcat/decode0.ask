/* "decode0":キーコード・デコーダー for PC/AT ver.1.0 */

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

void near Keydecode_Init();
void near Keydecode_led();

struct WORK {
	int last;
	short shiftmap, [2];
	int declist[1028 /* 257 * 4 */];
	/* +1036 */
	int subcmdbuf[0x5bf4];
};

void far Keydecode_syscmd()
{
	int *cmd == FS:EBX;
	WORK *work == DS:0;

	PUSHAD();
	MOV(EAX, CS);
	PUSH(DS);
	EAX += 8;
	DS = AX;
nextcmd:
	EAX = *cmd;
	if (EAX == 0)
		goto cmd0000;
	if (EAX == 0x010c)
		goto cmd010c; /* decodeルール定義 */
	if (EAX == 0x0104)
		goto cmd0104; // Keydecode_setlock
	if (EAX == 0x0110)
		goto cmd0110; /* decodeルール初期化 */
	if (EAX == 0x0108)
		goto cmd0108; // Keydecode_Mainへのベクタ通知
	if (EAX == 0x0100)
		goto cmd0100; // 初期化
	INT(0x03);

cmd0000:
	POP(DS);
	[SS:ESP + 16] = EBX;
	POPAD();
	return;

cmd0100:
	// 初期化
	PUSH((offset) cmd);
	Keydecode_Init();
	POP((offset) cmd);
	(offset) cmd += 4;
	goto nextcmd;

cmd0104:
	/* Keydecode_setlock */
	EAX = cmd[4];
	PUSH((offset) cmd);
	ROR(EAX, 16);
	work->shiftmap &= AX;
	ROR(EAX, 16);
	work->shiftmap |= AX;
	Keydecode_led();
	POP((offset) cmd);
	(offset) cmd += 8;
	goto nextcmd;

cmd0108:
	// Keydecode_Mainへのベクタ通知
	asmout("MOV DWORD PTR FS:[EBX+4],OFFSET Keydecode_Main");
	(short) cmd[8] = CS;
	(offset) cmd += 12;
	goto nextcmd;

cmd010c:
	/* decodeルール定義(CLIしたほうがいいかも) */
	/* cmd, opt(len), rawコード, shift-lock-bitmap(mask, equal), subcmd,... */
	/* subcmdの一覧 */
	/*	01 : sendsignal(mode-1), call vector, cmd(01), len(max:1KB), signal,...
		02 : sendsignal(mode-2), 
		03 : sendsignal(mode-3),
		04 : or shift-lock-bitmap, 0(dw), bitmap, cmd(04), 0(byte)
		05 : and shift-lock-bitmap,
		06 : xor shift-lock-bitmap,
	//	07 : control LED, hardware-param, bitmap(andしてノンゼロならon), cmd(07), hardware-param
	*/
	/* shift-lock-bitmapの割付例 */
	/*	bit0 : scroll...自動反映
		bit1 : numlock...自動反映
		bit2 : caps...自動反映
		bit3 : reserve...自動反映
		bit4 : shift
		bit5 : ctrl
		bit6 : alt
		bit7 : reserve
		bit14, 15は、make/break/remake/overbreak
	*/

	/*
		数字の"1":
			no-shift & no-ctrl & no-altでキーを押した時
			numlock & no-shift & no-ctrl & no-altでテンキーを押した時
		英語文字"A":
			capslock & no-shift & no-ctrl & no-altでキーを押した時
			no-capslock & shift & no-ctrl & no-altでキーを押した時
		英語文字"a":
			no-capslock & no-shift & no-ctrl & no-altでキーを押した時
			capslock & shift & no-ctrl & no-altでキーを押した時

		というわけで、Aとaを登録すると都合4パターンを登録する必要がある
		キーの複雑な対応は、winman0で処理させる。


	*/



	/* ワークエリアから適当に切り取って転送して、ポインタを繋いでおわり。 */
	ESI = work->last;
	ECX = cmd[ 4]; /* len */
	EDX = cmd[ 8]; /* rawコード */
	EAX = cmd[12]; /* shiftmap */
	(offset) cmd += 16;
	[DS:ESI] = EAX;
	EDI = ESI;
	ESI += 8;
	ECX -= 2;
	do {
		EAX = *cmd;
		(offset) cmd += 4;
		[DS:ESI] = EAX;
		ESI += 4;
		ECX--;
	} while (!= 0);
	[DS:EDI + 4] = ECX /* 0 */;
	work->last = ESI;
	ESI = work->declist[EDX * 4];
	if (ESI == 0) {
		work->declist[EDX * 4] = EDI;
		goto nextcmd;
	}
	do {
		EAX = ESI;
		ESI = [DS:ESI + 4];
	} while (ESI != 0);
	[DS:EAX + 4] = EDI;
	goto nextcmd;

cmd0110:
	/* decodeルール初期化 */
	work->last = 1036;
	(offset) cmd += 8;
	LEA(ESI, work->declist[0]);
	EAX = 0;
	ECX = 257;
	do {
		[DS:ESI] = EAX;
		ESI += 4;
		ECX--;
	} while (!= 0);
	goto nextcmd;
}

void far Keydecode_Main()
/* CLIしたほうがいいかも */
{
	unsigned int keyint_sel   ==  8 * 8, keydata_sel   ==  9 * 8;
	WORK *work == DS:0;

	int *msg == DS:ESI;

	MOV(ECX, CS);
	PUSH(DS);
	ECX += 8;
	EAX = msg[8];
	DS = CX;
	PUSH(ESI);
	if ((unsigned) EAX >= 0x04000000)
		goto ignore;
	ECX = EAX;
//	EDX = EAX;
	(unsigned int) ECX >>= 10;
	EAX &= 0x00ffffff;
	ECX &= 0xc000;
	/* mode-1バッファを検索する */
	/* コードが存在したら、shiftmapではなく、バッファ内のシフトコードをローディング