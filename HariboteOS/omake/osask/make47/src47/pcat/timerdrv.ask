/*	"timerdrv.aska"
	OSASK/AT用のタイマールーチン(type-A ver. 1.3)
	Copyright(C) 2004 川合秀実(川合堂)		*/

//	古いチップセットには対応していない。なぜなら、連続アクセスの際にウェイトが入っていないから。

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

#define	DEBUG		1

//	#define QEMU		1

struct SS0_struct {
	void [32];
	char ring0_count, [3];
	/* void * */ int [4], ring0call[6], [2];
	char cli_count, [3];
	/* void * */ int [4], cli_call[6], [2];
};

struct TimerNode {
	int signalbuf[32]; // タイマーシグナルは、普通よりも小さい
	int call_vector[8];
	int time[12], interval;
	// int near *back, near *next;
	int back, next;
	// これでちょうど64bytes.
};

struct TimerWork {
	int jmpvec; // 使っていない（timer type-Bのなごり）
	int longcounter; // 残り待ち時間（何回の割り込みを待つのか）
	int predict_PIT1_count /* タイムアウトしたときの値 */; // 使っていない
	char status, [3];

	// origin(0x0010)

	// 以下全て使っていない
	unsigned int PIT1_count0 /* 設定値 */;
	unsigned int PIT1_delta_100000000, PIT1_delta_10000, PIT1_delta_fffeffff /* それぞれ、どれだけ減るかを表したもの */;
	signed int PIT1_delta_max, PIT1_delta_min /* PIT1_count0 / 2, - PIT1_count0 / 2 */;
	int limit /* 先行実行限界値 */;

	void [20];
	void [192];

	// origin(0x0100)

	TimerNode head, last, timeout, freenode[3200 /* 50 * sizeof (TimerNode) */];
};

void calc_count1ms();

void far TimerSysCmd()
// FS:EBXからコマンド
{
	PUSH(DS);
	ESP -= 24;
	[SS:ESP +  0] = EAX;
	MOV(EAX, CS);
	[SS:ESP +  4] = ECX;
	EAX += 8;
	[SS:ESP +  8] = EDX;
	DS = AX;
	EAX = [FS:EBX]; // 4の倍数
	[SS:ESP + 12] = EBP;
	[SS:ESP + 16] = ESI;
	[SS:ESP + 20] = EDI;
	if (EAX != 4)
		asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
	asmout("JMP TimerSC_Special");
}

void far TimerInt()
{
	TimerWork *work == DS:0x0000;
	unsigned short PIC_mastar_OCW2 == 0x0020;

	PUSH(DS);
	PUSH(EAX);
	MOV(EAX, CS);
	EAX += 8;
	DS = AX;

	// 例外なく、割り込みはすぐに終了
	AL = 0x60 /* IRQ-00を終了 */;
	OUT(PIC_mastar_OCW2, AL);

	// 現在時刻の算出方法 : head.time - 残りカウント

	// 残りカウントの算出方法 : (longcounter - 1) * 0x10000 + PIT0のカウント
	// (大きな数や0のときは、IRQ0が来ているかどうかによって、longcounterを小さく見てやる必要があるかもしれない)
	// 0でIRQが来ていなかったら・・・そんなことはありえない。絶対に来ている。が、longcountは減らしてはいけない。

	// ただし、補正が必要。・・・補正というか、この時刻に対応するPIT1のカウントを算出しておく。



	// さらに高速化できる。・・・short_waitでも、わざとlongcounterを1にしておく。
	// 割り込みをキャンセルするルーチンは、statusを見る。0ならlong,1ならshort。
	// 2なら割り込み処理中。
}

/*	基本は32bitバージョン。まさに2^32カウントに一度、時刻補正割り込みが起きるから
	問題はない。ちなみに、この割り込みは１時間に１度である。もっというっと、
	時刻補正割り込みとは、何もしない割り込みのことである。・・・いや、違う、
	時刻補正割り込みは2^(32+16)カウントに一度である。これは、７年に一度。

	タイムアウトすると、すぐに現在時刻が更新され、インターバルも調節される。
	この状態になると、共通ルーチンに入る（割り込み、非割り込み）。
*/

/*	このバージョンでは、割り込みを禁止したまま次々と処理していくが、
	そうでないバージョンを作ることも可能だろう。しかし、どちらが好ましいかは分からない。
*/

void TimerRegister();

void TimerLongcount()
{
	TimerWork *work == DS:0x0000;

	work->longcounter--;
	/* (true) */ if (!= 0) {
		POP(EAX);
		POP(DS);
		IRETD();
	}
	// goto TimerCountout;
}

void TimerCountout()
//	ここに来たら、CLI期間がかなり長くなるので、IRQ-00をmaskして
//	割り込み終了をやってしまう方がいいかもしれない。
//	しかし、ノードを繋ぎ変えているときに他の割り込みが発生し、
//	そいつがタイマーを設定しようとされると困る。

//	そのために、接続待機群をチェーンで繋いでおくか？
//	チェーンじゃなくて32エントリくらいのスタックがあればいいだろう。
//	この案は結構いいかも。

//	キーボードもシグナルを出すはめになるとわかったら、そうした方がいいだろう。

//	いや、やっぱりやらなくても平気かな？・・・うーん、