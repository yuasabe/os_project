// "tapi0.ask" ver.0.4 copyright(C) 2002 H.Kawai(川合秀実)

/* "for DEBUG"を検索すれば、デバッグのために追加された部分を見つけられる */

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

struct TAPI_TSS386 {  // 全てTL-0
	short BackLink, [2];
	int stack0_ESP; short stack0_SS, [2];
	int stack1_ESP; short stack1_SS, [2];
	int stack2_ESP; short stack2_SS, [2];
	int CR3;
	int EIP;
	int EFLAGS;
	int EAX, ECX, EDX, EBX;
	int ESP, EBP, ESI, EDI;
	short ES, [2], CS, [2], SS, [2];
	short DS, [2], FS, [2], GS, [2];
	short LDTR, [2], TaskFlags, IOBitMap;
	// 合計104bytes
};

struct TAPI_LlvPrm { // 32bytes
	int run[12];
	int Glv;
	int short_run[12]; // 0x10〜0x1b  0x1bが-1なら、invalid
	int Ilv;
};


struct TAPI_TSS {
	TAPI_TSS386 tss386;  // TL-0ブロック(104bytes)

	// system-signal処理のブロック(24bytes)
	int sysbox_write_free, sysbox_write_ptr, sysbox_write_ptr0, sysbox_write_ptr1;
	int sysbox_read_ptr;
	unsigned char msgbox_status, softint_nest, [2];
		// bit0 : buffer write overrun
		// bit6 : sysbox empty(0:empty)
		// bit7 : msgbox empty(0:empty)

	int set[12], tr[4], run[12], ldt_img; // TL-1ブロック(48bytes)
	int fpu_reg_img, sse_reg_img /* for SSE & SSE2 */;
//	TAPI_TSS near *back, near *next;
	int back, next;

	int softint_EIP /* +0x00b0 */; short softint_CS; // signal処理のブロック(48bytes)
	short softint_oldCS;
	int softint_oldEIP;
	unsigned char softint_Llv, sysint_Llv /* このフィールドは使わない。softintと共通 */, now_Llv, softint_oldLlv;
	int msgbox_write_free, msgbox_write_ptr, msgbox_write_ptr0, msgbox_write_ptr1;
	int msgbox_eom_code, msgbox_rewind_code, [8];

//	softint_oldLlvは、スタックにつむと0xffに変化する...で、0xffのときに、ストアされる
//	softint_CS == 0のとき、CS:EIPの変化無し
//	softint_Llv == 0のとき、Llvの変化無し

// TL-2ブロック 32bytes
//	GlvPrm near *Glv /* +0x00e0 */; // TapiWorkSelの中のオフセット
//	LlvPrm near *Llv; // TapiWorkSelの中のオフセット
	int Glv, Llv; // 0xe0〜0xe7
	int Ilv, Llv_base; // Inner-level
	int short_run[12]; // +0x00f0
	char flags, [3];  // Setの再評価要求フラグ


// このタスクの全実行時間は、runではない。runは、現在のLlvのrunningタイムを示しているに過ぎない。
// 現在のLlvのLlvPrm.runは無効。

};


struct TAPI_WORK {
	int TskStart[12];              // (TL-1)タスクがスタートした時刻
	/* TAPI_TSS near * */ int TskPointer;   // (TL-1)現在走行中のタスクのポインタ

	int GlvStart[12];              // (TL-2)現在のGlvがスタートした時刻
	// TAPI_GlvPrm near *GlvNow;    // (TL-2)現在走行中のGlv
	int GlvNow;
//	int TskTimerMin[12];
	char TskTimerMode; // == 0 : 1タスクで独占。タイマー未使用。
	void [3];
	int taskFPU, [8]; /* taskFPUは0x0024 */

//	void (far *TimerSysCmd)(); 関数へのポインタ(far)
	int TimerSysCmd[8]; // +0x30
//	int *TimerNodeTimePtr; // タイマーフィールドのfarptr
	int TimerNodeTimePtr[8];  // +0x38
	int TimerCommand_Regist; // == 04 * 4; +0x40
	int TimerNode1;
	int TimerCommand_EOC1;
	int TimerCommand_Cancel; // == 05 * 4; +0x4c
	int TimerNode2;
	int TimerCommand_EOC2;
	int TimerCommand_GetTime; // == 06 * 4; +0x58
	int NowTimeCT[12]; // +0x5c
	int TimerCommand_EOC3; // == 00 * 4;	// 以上 (TL-2)

	// グローバルレベルは、0x100〜0x800。１つ当たり0x40バイト(計28レベル)
	// とりあえず、使うのは３つ。0x200, 0x400, 0x7c0(sleep)


};

struct TAPI_GlvPrm { // 計64bytes
	int run[12];
//	struct Tss near *Pointer;
	int pointer;
	int totalIlv; // +0x10
	int tasks;
	// bit0:Ilv変更フラグ(0で変更あり)、bit1:時分割抑制フラグ(1で抑制)。
	int MinIlv, MaxIlv;
	char flags; // フラグによっては、Ilvを考慮しない。
	void [31];
};

void near TapiFixOn();
void near TapiFixTsk();
void near TapiChgLlv();
void near TapiRemoveTsk();
void near TapiAddTsk();
void near TapiChangeTsk();

void near TAPI_Init();
void near TAPI_init_tssinit();
void near TAPI_AddNestSleep();
void near TAPI_SignalMessage();
void near TAPI_SignalMessage2();
void near TAPI_Softint1Ret();

void far TAPI_syscmd()
// TAPIコマンド受け付け
// これは、かならずlv0から呼ば