/*	"timerdrv.ask"
	OSASK/TOWNS用のタイマールーチン(type-A ver.1.2)
	Copyright(C) 2003 川合秀実(川合堂)		*/

/*	古いチップセットには対応していない。なぜなら、連続アクセスの際にウェイトが入っていないから。 */

/* mouseのセンスに対応(PIT1) */

#include "osaskinc.ask"

segment CODE(USE32, PARA);
default(code == CODE);

#define	DEBUG		1

struct SS0_struct {
	void [32];
	char ring0_count, [3];
	/* void * */ int [4], ring0call[6], [2];
	char cli_count, [3];
	/* void * */ int [4], cli_call[6], [2];
};

struct TimerNode {
	int signalbuf[32]; /* タイマーシグナルは、普通よりも小さい */
	int call_vector[8];
	int time[12], interval;
	// int near *back, near *next;
	int back, next;
	/* これでちょうど64bytes. */
};

struct TimerWork {
	int jmpvec; /* 使っていない（timer type-Bのなごり） */
	int longcounter; /* 残り待ち時間（何回の割り込みを待つのか） */
	int predict_PIT1_count /* タイムアウトしたときの値 */; /* 使っていない */
	char status, [3];

	// origin(0x0010)

	/* 以下全て使っていない */
	unsigned int PIT1_count0 /* 設定値 */;
	unsigned int PIT1_delta_100000000, PIT1_delta_10000, PIT1_delta_fffeffff /* それぞれ、どれだけ減るかを表したもの */;
	signed int PIT1_delta_max, PIT1_delta_min /* PIT1_count0 / 2, - PIT1_count0 / 2 */;
	int limit /* 先行実行限界値 */;

	void [20];
	void [64];

	// origin(0x0080);

	int mousevector[8], mousecount; int mousestrobe[4];
	int mousemask0, mousedefault0, mousemask1, mousedefault1;
	int mousesignalbuf[16];
	int mousebuf0[4], mousebuf1[4], mousetimernode, mousewait1[2], mousewait0[2];
	/* mouseflagが0だとmousedefaultを更新する */
	int mousebutton0, mousebutton1, [8];
	void [48];

	// origin(0x0100)

	TimerNode head, last, timeout, freenode[3200 /* 50 * sizeof (TimerNode) */];
};

void calc_count1ms();

void far TimerSysCmd()
/* FS:EBXからコマンド */
{
	PUSH(DS);
	ESP -= 24;
	[SS:ESP +  0] = EAX;
	MOV(EAX, CS);
	[SS:ESP +  4] = ECX;
	EAX += 8;
	[SS:ESP +  8] = EDX;
	DS = EAX;
	EAX = [FS:EBX]; /* 4の倍数 */
	[SS:ESP + 12] = EBP;
	[SS:ESP + 16] = ESI;
	[SS:ESP + 20] = EDI;
	if (EAX != 4)
		asmout("JMP DWORD PTR DS:[TimerSC_JmpTbl+EAX]");
	asmout("JMP TimerSC_Special");
}

void far TimerInt()
{
	TimerWork *work == DS:0x0000;
	unsigned short PIC_mastar_OCW2 == 0x0000;

	PUSH(DS);
	PUSH(EAX);
	MOV(EAX, CS);
	EAX += 8;
	DS = AX;

	IN(AL, 0x0060);
	/* PIT1のタイムアウトか？ */
	AH = AL;
	AH &= 0x0a;
	if (AH == 0x0a) {
		PUSH(EDX);
		PUSH(ECX);
		PUSH(EAX);
		AL = 0x70; /* PIT1 #1, L/H, mode0, bin */
		OUT(0x0046, AL);
		EAX = work->mousewait1[0]; /* 13で42.32マイクロ秒 */
		OUT(0x0042, AL);
		EDX = 0x04d0;
		AL = AH;
		OUT(0x0042, AL);
		ECX = work->mousecount;
		IN(AL, DX);
		EDX += 0x02;
	//	(char) work->mousebuf0[ECX - 1] = AL;
		asmout("MOV BYTE PTR DS:[00B0H+ECX-1],AL");
		IN(AL, DX);
		EDX += 0x04;
	//	(char) work->mousebuf1[ECX - 1] = AL;
		asmout("MOV BYTE PTR DS:[00B4H+ECX-1],AL");
	//	AL = work->mousestrobe[ECX - 1];
		asmout("MOV AL,BYTE PTR DS:[008CH+ECX-1]");
		ECX--;
		OUT(DX, AL);
		work->mousecount = ECX;
		POP(EAX);
		asmout("JZ TimerMouseSignal");
		asmout("TimerInt_MouseSignal2: EQU $");
		POP(ECX);
		POP(EDX);
	//	TEST(AL, 0x01);
	//	asmout("JZ TimerInt_IRETD");
		asmout("JMP TimerInt_IRETD");
	}

	/* PIT0のタイムアウトを受理 */
	AL >>= 2;
	AL &= 0x07;
	AL |= 0x80;
	OUT(0x0060, AL);

	/* 現在時刻の算出方法 : head.time - 残りカウント */

	/* さらに高速化できる。・・・short_waitでも、わざとlongcounterを1にしておく。 */
	/* 割り込みをキャンセルするルーチンは、statusを見る。0ならlong,1ならshort。 */
	/* 2なら割り込み処理中。 */
}

/*	基本は32bitバージョン。まさに2^32カウントに一度、時刻補正割り込みが起きるから
	問題はない。ちなみに、この割り込みは１時間に１度である。もっというっと、
	時刻補正割り込みとは、何もしない割り込みのことである。・・・いや、違う、
	時刻補正割り込みは2^(32+16)カウントに一度である。これは、７年に一度。

	タイムアウトすると、すぐに現在時刻が更新され、インターバルも調節される。
	この状態になると、共通ルーチンに入る（割り込み、非割り込み）。
*/

/*	このバージョンでは、割り込みを禁止したまま次々と処理していくが、
	そうでないバージョンを作ることも可能だろう。しかし、どちらが好ましいかは分からない。
*/

void near TimerRegister();

void near TimerLongcount()
{
	unsigned short PIC_mastar_OCW2 == 0x0000;
	SS0_struct *ss0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;
	TimerWork *work == DS:0x0000;

	work->longcounter--;
	/* (true) */ if (!= 0) {
		asmout("TimerInt_IRETD: EQU $");
		AL = 0x60 /* IRQ-00を終了 */;
		OUT(PIC_mastar_OCW2, AL);
		POP(EAX);
		POP(DS);
	//	CMP(ss0->ring0_count, 0);
	//	asmout("CMP BYTE PTR SS:[0FFFFFFE0H],0");
	//	asmout("JZ TimerRing0Call");
		IRETD();
	}
	AL = 0x60 /* IRQ-00を終了 */;
	OUT(PIC_mastar_OCW2, AL);

	// goto TimerCountout;
}

void near TimerCountout()
/*	ここに来たら、CLI期間がかなり長くなるので、IRQ-00をmaskして
	割り込み終了をやってしまう方がいいかもしれない。
	しかし、ノードを繋ぎ変えているときに他の割り込みが発生し、
	そいつがタイマーを設定しようとされると困る。

	そのために、接続待機群をチェーンで繋いでおくか？
	チェーンじゃなくて32エントリくらいのスタックがあればいいだろう。
	この案は結構いいかも。

	キーボードもシグナルを出すはめになるとわかったら、そうした方がいいだろう。

	いや、やっぱりやらなくても平気かな？・・・うーん、悩ましい。

	最終案：maskはしない。しなくていいように、最後の一発はmode0でやるようになっている。
	TimerNodeを付け替えるときはIF = 0になっているが、それが済めばIF = 1になる。

	割り込みのキャンセルができないため、逆に待ち時間1ですぐに確実に割り込ませる。
	このために、タイムアウトチェックルーチンは、インラインで組み込む */
{
	TimerWork *work == DS:0x0000;
	SS0_struct *ss0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;

	asmout("#work_head EQU 256");
	asmout("#work_timeout EQU 384");

	asmout("#TN_call_vector EQU 32");
	asmout("#TN_back EQU 56");
	asmout("#TN_next EQU 60");

	PUSHAD();


/*	タイムアウト群の存在をチェック。
	work->head.intervalが正なら、EBXを加える
	そのあとで、そのノードを切り離し、フライングタイムアウトルーチンへ
	work->head.intervalまでもタイムアウトしてしまったら、これもフライングタイムアウトの末尾に加える */

/*	2002.03.04 work->head.interval == 0でここに入ってくると抜けられなくなる */

	TimerNode *tnode == DS:ESI, *tnext == DS:EDI, *tback == DS:EBX;

check_timeout:
	EAX = work->head.interval;
	EBX = 0; /* 0または負の値 */
	for (;;) {
		/* (false) */ if ((signed) EAX < 0) {
			/* 割り込み予定時刻 - 現在時刻 = 残り時間 */
			(offset) tnode = work->head.next;
			EAX = tnode->time[0];
			ECX = tnode->time[4];
			EAX -= work->head.time[0];
			EDX = tnode->time[8];
			/* ECX -= work->head.time[4] + CF */ SBB(ECX, work->head.time[4]);
			/* EDX -= work->head.time[8] + CF */ SBB(EDX, work->head.time[8]);
		//	work->head.interval = EAX;
			ECX |= EDX;
			if (!= 0)
				goto to_invalid;
			if ((signed) EAX > 0)
				break;
	to_invalid:
		//	work->head.interval = 0x90000000;
			EAX = 0x90000000;
			break;
		}
		EAX += EBX;
		asmout("JO #to_invalid");
	//	work->head.interval = EAX;
		if ((signed) EAX > 0)
			break;
		/* タイムアウト */
		(offset) tnode = work->head.next;
		(offset) tback = work->timeout.back;
		(offset) tnext = tnode->next;
		work->timeout.back = (offset) tnode;
		work->head.next = (offset) tnext;
		/* tnode->next = (offset) &(work->timeout) */ asmout("MOV DWORD PTR DS:[ESI+#TN_next],#work_timeout");
		tnode->back = (offset) tback;
		/* tnext->back = (offset) &(work->head) */ asmout("MOV DWORD PTR DS:[EDI+#TN_back],#work_head");
		tback->next = (offset) tnode;
		EBX = EAX;
		EAX = tnode->interval;
	/*	切り離して、タイムアウトチェーンに接続
		そして、負になったEAXを元に、EBX = - EAX;とし、
		EAXに新しいwork->head.intervalをロードして、ループに突入する。 */
	}

	(offset) tnode = work->timeout.next;
	work->head.interval = EAX;
	asmout("CMP ESI,#work_timeout");
	if (!=)
		goto exec3;

	if ((signed) EAX < 0)
		goto invalid_inverval;
		/*	この時、0x80000000以上の待ち時間があることを仮定していい・・・long32かmax_wait
			max_waitから直接に32bit-intervalモードに移行することはない。かならず、long32を経由する
			こうすることで、コードをコンパクトにできる */
short_wait:

/*	EAXだけ待つ。 */

	work->longcounter = EAX;
	ECX = 0;
//	TimerNode *tnode == DS:ESI;
	(offset) tnode = work->head.next;
	work->head.interval = ECX; // ECX == 0
	CMP(CL /* == 0 */, work->status);
	EDX = tnode->time[8];
	EAX = tnode->time[0];
	ECX = tnode->time[4];
	work->head.time[8] = EDX;
	work->head.time[0] = EAX;
	work->head.time[4] = ECX;
	if (!= 0)
		goto check_nesting;
	POPAD();
	POP(EAX);
	POP(DS);
//	CMP(ss0->ring0_count, 0);
//	asmout("CMP BYTE PTR SS:[0FFFFFFE0H],0");
//	asmout("JZ TimerRing0Call");
	IRETD();

check_nesting:
	work->status = 0 /* 通常割り込み待機中(現在時刻は無効) */;

	ss0->cli_count--; /* 割り込みルーチンの基本 */
	if (== 0) goto call_clicall;
	POPAD();
	POP(EAX);
	POP(DS);
	ss0->ring0_count--;
	if (== 0) goto call_ring0call;
	IRETD();

call_clicall:
//	PUSHAD();
	/* (ss0->clicall)() */ asmout("CALL FAR DWORD PTR SS:[0FFFFFFC0H+038H]");
//	POPAD();
	POPAD();
	POP(EAX);
	POP(DS);
	ss0->ring0_count--;
	if (== 0) goto call_ring0call;
	IRETD();

call_ring0call:
	asmout("TimerRing0Call: EQU $");
	/* (ss0->ring0call)() */ jmp_system_count0();
//	IRETD();

exec3: /* フライングタイムアウト用合流地点 */

	if (work->status == 0) {
		work->status = 1 /* タイムアウト処理中(現在時刻は有効) */;

		ss0->ring0_count++; /* 割り込みルーチンの基本 */
		ss0->cli_count++; /* (これをやったかどうかは、work->status != 0かどうかでわかる) */
	}
	/*	割り込み可能期間中は、タイマーチェーンを繋ぎ変えてよい。
		割り込みシグナルは、チェーンを切ってから、割り込みを許可して、
		その後にコールされる。 */

	/* タイムアウトチェーンから一つ取り出す。 */
//	(offset) tnode = work->timeout.next;
	(offset) tnext = tnode->next;
	/* (char) tnode->back = 1 */ asmout("MOV BYTE PTR DS:[ESI+#TN_back],1"); /* このノードは時刻がセットされており、タイムアウトした(切り離された) */
	work->timeout.next = (offset) tnext;
	/* tnext->back = (offset) &(work->timeout) */ asmout("MOV DWORD PTR DS:[EDI+#TN_back],#work_timeout");
//	STI(); /* 2000/05/24 割り込み処理中は一貫してCLIしておくことになった。 */
	asmout("CALL FAR DWORD DS:[ESI+#TN_call_vector]");
//	CLI();
	if (CF == 1 /* 連続割込み要求 */) {
		/* CFを1にするなら、ESIを壊してはいけない */

		/*	ノードを更新して、登録・・・登録ルーチンは、
			headの次のノードに繋ぐことがあったかどうかはチェックできるようにするが
			勝手にTimerExecuteを呼んだりはしない */
		EAX += tnode->time[0];
		ADC(ECX, tnode->time[4]);
		tnode->time[0] = EAX;
		ADC(EDX, tnode->time[8]);
		tnode->time[4] = ECX;
		tnode->time[8] = EDX;
		TimerRegister(); /* ESI, EDX:ECX:EAX に時刻。これが呼ばれるとき、現在時刻は有効。 */
	}

/*	タイムアウト群の存在をチェック。
	work->head.intervalが正なら、ESIを加える
	そのあとで、そのノードを切り離し、フライングタイムアウトルーチンへ
	work->head.intervalまでもタイムアウトしてしまったら、これもフライングタイムアウトの末尾に加える */

	goto check_timeout;

invalid_inverval:
	/* この時、0x80000000以上の待ち時間があることを仮定していい・・・long32かmax_wait */
	(offset) tnode = work->head.next;
	EAX = tnode->time[0];
	ECX = tnode->time[4];
	EAX -= work->head.time[0];
	EDX = tnode->time[8];
	SBB(ECX, work->head.time[4]);
	SBB(EDX, work->head.time[8]);
	if (!= 0)
		goto long32_wait;
	if (ECX == 0)
		goto short_wait;

long32_wait:
	EAX -= 0xffffffff;
	SBB(ECX, 0);
	SBB(EDX, 0);
	EBX = 0x90000000;
	work->longcounter = 0xffffffff;
	if (== 0) {
		if (ECX == 0) {
			if ((signed) EAX > 0)
				EBX = EAX;
		}
	}
	EAX = 0;
	work->head.interval = EBX;
	work->head.time[0] += 0xffffffff;
	ADC(work->head.time[4], EAX);
	ADC(work->head.time[8], EAX);
	if (work->status != 0)
		goto check_nesting;
	POPAD();
	POP(EAX);
	POP(DS);
//	CMP(ss0->ring0_count, 0);
//	asmout("CMP BYTE PTR SS:[0FFFFFFE0H],0");
//	asmout("JZ TimerRing0Call");
	IRETD();
}

void near TimerMouseSignal()
{
	unsigned short PIC_mastar_OCW2 == 0x0000;
	SS0_struct *ss0 == /* SS:(- sizeof (SS0_struct)) */ SS:0xffffffc0;
	TimerWork *work == DS:0x0000;

	EAX &= 0xfffffff7 /* TM1MSK = 0 */;
	ECX = EAX;
	AL >>= 2;
	AL &= 0x07;
	OUT(0x0060, AL);
	EAX = ECX;
	ECX = work->mousebuf0[0];
	EDX = work->mousebuf1[0];
	ECX &= work->mousemask0;
	EDX &= work->mousemask1;
	ECX ^= work->mousedefault0;
	EDX ^= work->mousedefault1;
	PUSH(ECX);
	ECX |= EDX;
	POP(ECX);
	asmout("JZ TimerInt_MouseSignal2");
	ECX &= work->mousebutton0;
	EDX &= work->mousebutton1;
	work->mousedefault0 ^= ECX;
	work->mousedefault1 ^= EDX;
	PUSHAD();
	AL = 0x60 /* IRQ-00を終了 */;
	OUT(PIC_mastar_OCW2, AL);
	ss0->ring0_count++; /* 割り込みルーチンの基本 */
	ss0->cli_count++;
	LEA(ESI, work->mousesignalbuf[0]);
	asmout("CALL FAR DWORD DS:[0080H]"); /* mousevector */
	ss0->cli_count--;
	/* (false) */ if (== 0) {
	//	PUSH(DS);
		/* (ss0->clicall)() */ asmout("CALL FAR DWORD SS:[0FFFFFFC0H+038H]");
	//	POP(DS);
	}
	POPAD();
	ss0->ring0_count--;
	POP(ECX);
	POP(EDX);
	POP(EAX);
	POP(DS);
	asmout("JZ TimerRing0Call");
	IRETD();
}

void near GetTimeAndFixZero();
void near GetNowTime();

void near TimerRegister0()
/* EDX:ECX:EAXのロードをやる */
{
	TimerNode *tnode == DS:ESI;
	EAX = tnode->time[0];
	ECX = tnode->time[4];
	EDX = tnode->time[8];
}

void near TimerRegister()
/*	ESI, EDX:ECX:EAX に時刻。これが呼ばれるとき、現在時刻は有効。
	割り込みを禁止しておくこと。 */
{
	asmout("#work_timeout EQU 384");
	asmout("#TN_next EQU 60");

	TimerWork *work == DS:0x0000;
	TimerNode *tnode == DS:ESI, *tnext == DS:EDI, *tback == DS:EBX;

	EAX -= work->head.time[0];
	SBB(ECX, work->head.time[4]);
	SBB(EDX, work->head.time[8]);
	/* (false) */ if ((unsigned) < 0 /* 既にタイムアウト? */) {
		/* 正確には、0でもタイムアウトなのだが、EDXだけでは分からないので、放っておく。 */
		/* (false) */ if (work->status == 0) {
			EBX = ESI;
			GetTimeAndFixZero();
			ESI = EBX;
			TimerNode *tnode2 == DS:EBX;
			EAX = tnode2->time[0];
			ECX = tnode2->time[4];
			EAX -= work->head.time[0];
			EDX = tnode2->time[8];
			/* ECX -= work->head.time[4] + CF */ SBB(ECX, work->head.time[4]);
		//	work->status = 0;
			/* EDX -= work->head.time[8] + CF */ SBB(EDX, work->head.time[8]);
			if ((unsigned) >= 0 /* タイムアウトしてない */)
				goto entry2;
		}
		/* タイムアウトに直接登録 */
		(offset) tback = work->timeout.back;
		work->timeout.back = (offset) tnode;
		/* tnode->next = (offset) &(work->timeout) */ asmout("MOV DWORD PTR DS:[ESI+#TN_next],#work_timeout");
		tnode->back = (offset) tback;
		tback->next = (offset) tnode;
		return;
	}
entry2:
	/* ここに来るとき、EDXの状態によってZFがセットされている。しかも、EDXは負ではない。 */
	ECX |= EDX;
	if (!= 0)
		goto comp_time;
	if ((signed) EAX < 0)
		goto comp_time;

	// 残り時間は31bit以下。

	// CF == 0である限り、どんどん引く。
	// CF == 1になったら、invalid_intervalのせいか、単に時間が足りなくなったかのどちらかである。
	// どっちにしても、その前に挿入すべきなのは確実。

	ECX = work->head.interval; /* これは負になりうるので、特別処理。 */
	/* (offset) tback = &work->head */ LEA((offset) tback, (int) work->head);
	EAX -= ECX;
	(offset) tnext = work->head.next;
	/* if (OF == 1) goto comp_time; */ asmout("JO #comp_time");
	if ((signed) < 0) /* unsignedで比較すれば下のifは省略できるが、ECXが有効な負の値である場合を取り扱えない */
		goto insert;
	if ((signed) ECX < 0xa0000000)
		goto insert;

	do {
		(offset) tback = (offset) tnext; // この文は実行速度を減少しない(AGI)。
		EAX -= tnext->interval;
		(offset) tnext = tnext->next;
	} while ((unsigned) >= 0);

	// time      00     02     07     11     99
	// inter     02     05     04     --     ??

insert:
	tnode->back = (offset) tback;
	tnode->next = (offset) tnext;
	ECX = tback->interval;
	tback->next = (offset) tnode;
	tnext->back = (offset) tnode;
	EAX += ECX;
	TEST(ECX, ECX);
	tback->interval = EAX;
	EAX = tnext->time[0];
	if ((signed) < 0)
		goto invalid_interval;

	/* ここにくるこということは、挿入前のtbackのintervalが31bitで