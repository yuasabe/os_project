// "fdcdrv0.ask" for TOWNS ver.2.4 copyright(C) 2003 H.Kawai(川合秀実)

#include "osaskinc.ask"

//	#define CFPOWERAUTOOFF	1

segment CODE(USE32, PARA);
default(code == CODE);

#define	ROOT_ENTRY0		0x101400	/* 1.44MBでは0x102600, 1.2MBでは0x101400 */
#define	ROOT_ENTRY1		0x102c00	/* 1.44MBでは0x104200, 1.2MBでは0x102c00 */
#define	TRACK0_ADDR0	0x100000	/* 1.44MBでは0x100000, 1.2MBでは0x100000 */
#define	TRACK1_ADDR0	0x102000	/* 1.44MBでは0x102400, 1.2MBでは0x102000 */
#define FAT0_ADDR0		0x100400	/* 1.44MBでは0x100200, 1.2MBでは0x100400 */
#define FAT1_ADDR0		0x100c00	/* 1.44MBでは0x101400, 1.2MBでは0x100c00 */
#define	FAT01_WBFS_BITS	0x0000001e	/* 1.44MBでは0x0007fffe(1-18), 1.2MBでは0x0000001e(1-4) */
#define	SECTOR_BYTES	1024		/* 1.44MBでは512, 1.2MBでは1024 */
#define	SYSTEM_SECTORS	9			/* 1.44MBでは31, 1.2MBでは9 */
#define	TOTAL_CLUSTERS	1223		/* 1.44MBでは2849(=2880-31), 1.2MBでは1223(=1232-9) */
#define	FAT_BYTES		2048		/* 1.44MBでは4608(=9*512), 1.2MBでは2048(=2*1024) */
#define	TOTAL_SECTORS	1232		/* 1.44MBでは2880, 1.2MBでは1232 */

/* クラスタ2は、0x4200, 0x2c00 */
/* だからクラスタ7-86をリザーブ */

struct FDC_WORK {
	int MC_ptr, MC_free, jmpvec_fdcint /* 0x0008 */;
	char motor /* 0x0208のbackup */, motor2 /* off待ちフラグ */, [2];
	int TimerCmd[8]; // 0x0010
	int timer_cmd0 /* メッセージセット (11 * 4) */, timer_node0, timer_msglen, timer_msg /* 0x0024 */; // 0x0018
	int timer_cmd1 /* 現在時刻セット (7 * 4) */, timer_node1; // 0x0028
	int timer_cmd2 /* 時刻加算 (8 * 4) */, timer_node2, time_add0, time_add4, time_add8; // 0x0030
	int timer_cmd3 /* ベクタセット (10 * 4) */, timer_node3, jmpvec_timer_EIP /* 0x004c */, jmpvec_timer_CS; // 0x0044
	int timer_cmd4 /* タイマー登録 (4 * 4) */, timer_node4; // 0x0054
	int timer_cmd5; // 0x005c
	int timer_cmd6 /* タイマー取り消し (5 * 4) */, timer_node5; // 0x0060
	int timer_cmd7; // 0x0068
	int wait0_0, wait0_4, wait0_8; // モーターONにしてから、アクセスまでのウェイト(0x006c)
	int wait1_0, wait1_4, wait1_8; // 最後のアクセスから、アクセスまでのウェイト(0x0078)
	char cylinder[4]; // 最後のコマンドを実行した後の値
	int track[20], dosload_phase, dosload_name[12], dosload_addr; // 0x0088
	int dosload_sigtmp, dosload_sigfin, dosload_FAT, dosload_size0, dosload_size1; // 0x00b0
	int TAPI_sendsignalofs, TAPI_sendsignalsel; // 0x00c4
	char trackreg[4]; // ドライブの値
	int dostmp[32], ret_EIP, [12];

	// 0x0100〜0x03ff : マイクロコマンドキュー(0.75KB)...192DW

	/* 0x0400〜0x5ff */
	void [512];

 	/* 360バイトのフラグ領域が必要(dirty bits) */
	char WBF[4]; /* ドライブ単位 */
	int WBFS[360]; /* セクタ単位 */ /* 1.2MBでは160バイト, 1.44MBでは360バイト */

	int CFIDE_name[12], CFport, CFbaseLBA;
	char CFdev, CFerrflg, CFpower, CFdev2;
	int readsecs, writesecs, formatsecs, loadfat, cardbus; /* test4, test6, test5 */
	int wait400count, [100];

	/* 0x0800〜0xfff */
	void [2048];
};

void FDC_Init();
void FDC_dosload();
void FDC_loadFAT_fd();
void FDC_loadFAT_cf();
void FDC_format();
void FDC_writeIPL();
void FDC_format2();
void FDC_writeIPL2();
// void FDC_MC_test4();
void FDC_doswrite();
void check_WBF();
void FDC_deletefile();
void FDC_createfile();
void ready_track01();
void search_file();
void send_sigfin();
void FDC_renamefile();
void FDC_resizefile();
void FDC_writebackcache();
void save_dosname();
void save_dosname2();
void poweron();
void poweroff();
void close_all();
void open_cf();
void errorfile();

void selectcf();
void readcf();
void writecf();

void far FDC_syscmd()
{
	unsigned int                         all_sel       ==  1 * 8;
	FDC_WORK *work == DS:0;
	int *cmd == FS:EBX;

	PUSHAD();
	MOV(EAX, CS);
	PUSH(DS);
	EAX += 8;
	DS = AX;
nextcmd:
	EAX = *cmd;
	if (EAX == 0)
		goto cmd0000;
	if (EAX == 0x0114)
		goto cmd0114; // FDC_continue
	if (EAX == 0x0118)
		goto cmd0118; // FDC_dosload
	if (EAX == 0x0110)
		goto cmd0110; // FDC_loadFAT
	if (EAX == 0x0108)
		goto cmd0108; // FDC_diskchange
	if (EAX == 0x010c)
		goto cmd010c; // FDC_diskcache0
	if (EAX == 0x0100)
		goto cmd0100; // 初期化
	if (EAX == 0x0104)
		goto cmd0104; // FDC_intのベクタ提供
	if (EAX == 0x011c)
		goto cmd011c; // FDC_format
//	if (EAX == 0x0120)
//		goto cmd0120; // FDC_writeIPL
	if (EAX == 0x0124)
		goto cmd0124; // FDC motor control
	if (EAX == 0x0128)
		goto cmd0128; // FDC_format(512)
	if (EAX == 0x012c)
		goto cmd012c; // FDC_writeIPL(512)
	if (EAX == 0x0018)
		goto cmd0018; // バージョン要求
	if (EAX == 0x0134)
		goto cmd0134; /* doswrite */
	if (EAX == 0x0138)
		goto cmd0138; /* invalid WB cache */
	if (EAX == 0x013c)
		goto cmd013c; /* writeback WB cache */
	if (EAX == 0x0140)
		goto cmd0140; /* リードトラック */
	if (EAX == 0x0180)
		goto cmd0180; /* create file */
	if (EAX == 0x0184)
		goto cmd0184; /* delete file */
	if (EAX == 0x0188)
		goto cmd0188; /* rename file */
	if (EAX == 0x018c)
		goto cmd018c; /* resize */
	if (EAX == 0x0190)
		goto cmd0190; /* change_drive(0-9) */
	if (EAX == 0x0194)
		goto cmd0194; /* change_device */

	INT(0x03);

cmd0000:
	POP(DS);
	[SS:ESP + 16] = EBX;
	POPAD();
	return;

cmd0100:
	// 初期化
	PUSH((offset) cmd);
	EAX = cmd[4];
	FDC_Init();
	POP((offset) cmd);
	(offset) cmd += 8;
	goto nextcmd;

cmd0104:
	// FDC_intのベクタ提供
	asmout("MOV DWORD PTR FS:[EBX+4],OFFSET FDC_int");
	(short) cmd[8] = CS;
	(offset) cmd += 12;
	goto nextcmd;

cmd0108:
	// FDC_diskchange
	EAX = 0;
	ECX = 20;
	do {
	//	work->track[ECX - 4] = EAX;
		[ECX - 4 + work->track] = EAX;
		ECX -= 4;
	} while (!= 0);
cmd0138:
	/* invalid WB cache */
	EAX = 0;
	ECX = 360;
	do {
	//	work->WBFS[ECX - 4] = EAX;
		[ECX - 4 + work->WBFS] = EAX;
		ECX -= 4;
	} while (!= 0);
	work->WBF[0] = AL;
	(offset) cmd += 4;
	goto nextcmd;

cmd010c:
	/* FDC_diskcache0 */
	/* キャッシュフラグの操作 */
	EAX = 0;
	ECX = cmd[4];
	(offset) cmd += 8;
	if ((unsigned) EAX < ECX) {
		do {
			BTS(work->track[0], EAX);
			EAX++;
		} while ((unsigned) EAX < ECX);
	}
	goto nextcmd;

#if 0
	//	 直接起動ディスクのIPLが読み込んだデーターをキャッシュバッファに転送
	PUSH(DS);
	PUSH(all_sel);
	POP(DS);
	EDX = 0x000800;
	ESI = TRACK0_ADDR0;
	ECX = 18 * 1024 / 4; /* 18KB */
	do {
		EAX = [DS:EDX];
		EDX += 4;
		[DS:ESI] = EAX;
		ESI += 4;
		ECX--;
	} while (!= 0);
	POP(DS);
	work->track[0] |= 0x03; // track0とtrack1
	(offset) cmd += 4;
	goto nextcmd;
#endif

cmd0110:
	// FDC_loadFAT
	PUSH((offset) cmd);
	EDX = cmd[4]; // EDX:完了のシグナル
	ECX = cmd[8]; // ECX:作業中のシグナル
	CALL(work->loadfat);
	POP((offset) cmd);
	(offset) cmd += 12;
	goto nextcmd;

cmd0114:
	// FDC_continue
	PUSH((offset) cmd);
	EAX = work->dosload_phase;
	asmout("CALL EAX");
	POP((offset) cmd);
	(offset) cmd += 4;
	goto nextcmd;

cmd0118:
	// FDC_dosload
	PUSH(GS);
	PUSH((offset) cmd);
	asmout("LGS ESI,DWORD FS:[EBX+4]"); // ディレクトリエントリ
	EAX = cmd[12]; // ロードアドレス（４バイトアライン）
	EDX = cmd[16]; // 完了シグナル
	ECX = cmd[20]; // 作業中のシグナル
	FDC_dosload();
	POP((offset) cmd);
	POP(GS);
	(offset) cmd += 24;
	goto nextcmd;

cmd011c:
	// FDC_format
	INT(0x03);
	PUSH((offset) cmd);
	EDX = cmd[4]; // EDX:完了のシグナル
	ECX = cmd[8]; // ECX:作業中のシグナル
	FDC_format();
	POP((offset) cmd);
	(offset) cmd += 12;
	goto nextcmd;

#if 0
cmd0120:
	// FDC_writeIPL
	INT(0x03);
	PUSH((offset) cmd);
	EDX = cmd[4]; // EDX:完了のシグナル
	ECX = cmd[8]; // ECX:作業中のシグナル
	FDC_writeIPL();
	POP((offset) cmd);
	(offset) cmd += 12;
	goto nextcmd;
#endif

cmd0124:
	// FDC motor control
	ECX = cmd[4]; /* CL:20c, CH:208(motor) */
	EDX = 0x020c;
	AL = 0;
	OUT(DX, AL);
	AL = CL;
	AL &= 0xf0;
	// INUSE点灯
	OUT(DX, AL);
	AL = CL;
	AL &= 0x0f;
	OUT(DX, AL);
	DL = 0x08;
	AL = CH;
	OUT(DX, AL);
	work->motor = AL;
	work->motor2 = 0;
	(offset) cmd += 8;
	goto nextcmd;

cmd0128:
	// FDC_format 512
	PUSH((offset) cmd);
	EDX = cmd[4]; // EDX:完了のシグナル
	ECX = cmd[8]; // ECX:作業中のシグナル
	FDC_format2();
	POP((offset) cmd);
	(offset) cmd += 12;
	goto nextcmd;

cmd012c:
	// FDC_writeIPL 512
	PUSH((offset) cmd);
	EDX = cmd[20]; // EDX:完了のシグナル
	ECX = cmd[24]; // ECX:作業中のシグナル
	FDC_writeIPL2();
	POP((offset) cmd);
	(offset) cmd += 12 + 16;
	goto nextcmd;

cmd0018:
	// バージョン要求
	// 本来は、cmd[4]が0であることを確認しなければいけない
	cmd[ 8] = 900; // ver.0.90
	cmd[12] = 0;
	cmd[16] = 0;
	cmd[20] = 0;
	(offset) cmd += 24;
	goto nextcmd;

cmd0134:
	// FDC_doswrite
	PUSH(GS);
	PUSH((offset) cmd);
	asmout("LGS ESI,DWORD FS:[EBX+4]"); // ディレクトリエントリ
	EAX = cmd[12]; // ライトバック内容アドレス（４バイトアライン）
	FDC_doswrite();
	POP((offset) cmd);
	POP(GS);
	(offset) cmd += 16;
	goto nextcmd;

cmd0140:
	/* read track */
	/* +00 : cmd, opt, priority, length(be 1), signal-header, signal */
	/* +24 : cmd, opt, error-code, addr, track-no */
	/* アドレスは物理アドレス */
	/* 完了したことを報告させたかったら、そういうコマンドを後ろにつける */
	/* シグナルヘッダもつけられるが、今は対応していない */
	/* キャンセルした場合、どこまでが完了したのかは報告されない */
	AL = cmd[40 /* track */];
	ECX = cmd[20 /* signal */];
	EDX = cmd[36 /* addr */];
	(offset) cmd += 44;
	PUSH((offset) cmd);
	AH = AL;
	AL /= 2;
	AH &= 0x01;
	CALL(work->readsecs);
	POP((offset) cmd);
	goto nextcmd;

cmd0180: /* create file */
	PUSH(GS);
	PUSH((offset) cmd);
	asmout("LGS ESI,DWORD FS:[EBX+4]"); // ディレクトリエントリ
	EDX = cmd[12]; // 完了シグナル
	ECX = cmd[16]; // 作業中のシグナル
	FDC_createfile();
	POP((offset) cmd);
	POP(GS);
	(offset) cmd += 20;
	goto nextcmd;


cmd0184: /* delete file */
	PUSH(GS);
	PUSH((offset) cmd);
	asmout("LGS ESI,DWORD FS:[EBX+4]"); // ディレクトリエントリ
	EDX = cmd[12]; // 完了シグナル
	ECX = cmd[16]; // 作業中のシグナル
	FDC_deletefile();
	POP((offset) cmd);
	POP(GS);
	(offset) cmd += 20;
	goto nextcmd;

cmd0188: /* rename file */
	PUSH(GS);
	PUSH((offset) cmd);
	asmout("LGS ESI,DWORD FS:[EBX+4]"); // ディレクトリエントリ
	EDX = cmd[12]; // 完了シグナル
	ECX = cmd[16]; // 作業中のシグナル
	FDC_renamefile();
	POP((offset) cmd);
	POP(GS);
	(offset) cmd += 20;
	goto nextcmd;

cmd018c: /* resize file */
	PUSH(GS);
	PUSH((offset) cmd);
	asmout("LGS ESI,DWORD FS:[EBX+4]"); // ディレクトリエントリ
	EAX = cmd[12]; /* 新サイズ */
	EDX = cmd[16]; // 完了シグナル
	ECX = cmd[20]; // 作業中のシグナル
	FDC_resizefile();
	POP((offset) cmd);
	POP(GS);
	(offset) cmd += 24;
	goto nextcmd;

cmd013c: /* writeback cache */
//	PUSH(GS);
	PUSH((offset) cmd);
	EDX = cmd[4]; // 完了シグナル
	ECX = cmd[8]; // 作業中のシグナル
	FDC_writebackcache();
	POP((offset) cmd);
//	POP(GS);
	(offset) cmd += 12;
	goto nextcmd;

cmd0190: /* change drive */
	AL = cmd[4];
	AL += 0x30;
	(char) work->CFIDE_name[7] = AL;
	(offset) cmd += 8;
	goto nextcmd;

cmd0194:
	/* change device */
	#if (!defined(CFPOWERAUTOOFF))
		poweroff();
	#endif
	close_all();
	ECX = cmd[4]; /* CL:no, CH:device-type */
	if (CH == 0x00) {
		/* FDD */
		asmout("MOV EAX,FDC_MC_test4_fd");
		work->readsecs = EAX;
		asmout("MOV EAX,FDC_MC_test6_fd");
		work->writesecs = EAX;
//		asmout("MOV EAX,FDC_MC_test5_fd");
//		work->formatsecs = EAX;
		asmout("MOV EAX,FDC_loadFAT_fd");
		work->loadfat = EAX;
		/* 手抜きなのでFDドライブは0と決め付けている */
	}
//	if (CH == 0x01) {
//		/* SCSI-HDD */
//		asmout("MOV EAX,FDC_MC_test4_cfide");
//		work->readsecs = EAX;
//		asmout("MOV EAX,FDC_MC_test6_cfide");
//		work->writesecs = EAX;
//		asmout("MOV EAX,FDC_MC_test5_fd");
//		work->formatsecs = EAX;
//		asmout("MOV EAX,FDC_loadFAT_cfide");
//		work->loadfat = EAX;
//		AL = CL;
//		AL &= 0x01;
//		AL <<= 4;
//		work->CFdev = AL;
//		AL = CL;
//		EAX &= 0x02;
//		EAX <<= 6;
//		EAX ^= 0x1f0;
//		work->CFport = EAX;
//	}
	if (CH == 0x02) {
		/* CF */
		/* デバイスを探す */
		asmout("MOV EAX,FDC_MC_test4_cf");
		work->readsecs = EAX;
		asmout("MOV EAX,FDC_MC_test6_cf");
		work->writesecs = EAX;
//		asmout("MOV EAX,FDC_MC_test5_fd");
//		work->formatsecs = EAX;
		asmout("MOV EAX,FDC_loadFAT_cf");
		work->loadfat = EAX;
		work->CFport = 0xe03ff000;
		work->CFerrflg = 0;
		if ((unsigned) CL >= 9) {
			/* 強制パワーオフ */
			/* CFしか使えるデバイスがない時にやる */
			AL = 0x41; /* A:ユーザによるエラー */
			AH = 0x07; /* とりあえずアクセス禁止 */
			errorfile();
		} else {
			open_cf();
			#if (!defined(CFPOWERAUTOOFF))
				poweron();
			#endif
		}
	}
	(offset) cmd += 8;
	goto nextcmd;
}

// O6B#で604、O7B#で302、O8B#で151。

// マイクロコマンドフォーマット：
//	・コマンド送信 cmd_ofs, bytes, ..., bytesをアラインする
//	・FDCからのIRQを待つ cmd_ofsのみ。
//	・ステータスリード cmd_ofs, 受信するバイト数、７バイトのステータス情報を格納するアドレス（FDC_WORK内に限定）
//	・ドライブレディー(このコマンドは、モーター回転を保証する)
//	・ドライブ解放（このコマンドが過ぎてから一定時間後にモーターが止まる）
//	・メイクシグナル(メッセージは16bytes固定) ofsのあとにメッセージロング(DW単位)、８バイトベクタ、メッセージ
//	・DMAセット

void far FDC_int()
{
	FDC_WORK *work == DS:0;
	int *cmd == DS:EBX, cmd_free == EBP;
	unsigned short PIC_mastar_OCW2 == 0x0000;

	PUSHAD();
	MOV(EAX, CS);
	PUSH(DS);
	EAX += 8;
	asmout("INC BYTE PTR SS:[0FFFFFFE0H]");
	DS = AX;	
	asmout("INC BYTE PTR SS:[0FFFFFFF0H]");

	EDX = 0x0200;
	IN(AL, DX);
	CL = AL;
	AL = 0x66 /* IRQ-06を終了 */;
	OUT(PIC_mastar_OCW2, AL);

	(offset) cmd = work->MC_ptr;
	cmd_free = work->MC_free;

	// FDC_MCを実行中は、CLI();しておくこと
	// DLにステータス
	asmout("CALL DWORD PTR DS:[0008H]"); // jmpvec_fdcint
	// 状態遷移割り込みがあるなら、jmpvec_fdcintを書き換えておけ。その際、cmdとcmd_freeは保存する。

	work->MC_ptr = (offset) cmd;
	work->MC_free = cmd_free;

	asmout("DEC BYTE PTR SS:[0FFFFFFF0H]");
	if (== 0) {
		asmout("CALL FAR DWORD SS:[0FFFFFFF8H]");
	}
	POP(DS);
	POPAD();
	asmout("DEC BYTE PTR SS:[0FFFFFFE0H]");
	if (== 0) {
		jmp_system_count0();
	}
	IRETD();
}

//	タイマーからの割り込みについては、各自で管理する。


void near FDC_MC_DriveReady()
// ドライブレディー(このコマンドは、モーター回転を保証する)
// このバージョンでは、とりあえず、ドライブ0にしか対応しない
{
	FDC_WORK *work == DS:0;
	int *cmd == DS:EBX, cmd_free == EBP;

	ECX = cmd[4];
	AL = work->motor;
	TEST(AL, 0x10);
	if (== 0) {
		// INUSE点灯
		EDX = 0x020c;
		AL = 0x50;
		OUT(DX, AL);
		AL = 0x01;
		AL <<= CL;
		AL |= 0x50;
		OUT(DX, AL);

		// モーターが回っていなかったので、回すことにする
		AL = work->motor;
		AL |= 0x10;
		EDX -= 0x04;
		work->motor = AL;
		OUT(DX, AL);

		// タイマーを使ってwaitする。本当は、ドライブごとにタイマーを使いたいので４本必要。
		MOV(EAX, DS);
		PUSH(FS);
		FS = AX;
		PUSH(EBX);
		EAX = work->wait0_0;
		ECX = work->wait0_4;
		EDX = work->wait0_8;
		work->time_add0 = EAX;
		work->time_add4 = ECX;
		work->time_add8 = EDX;
		/* work->jmpvec_timer_EIP = */ asmout("MOV DWORD PTR DS:[004CH],OFFSET #timer_int"); 
		EBX = /* (offset) &work->timer_cmd1 */ 0x0028;
		asmout("CALL FAR DWORD DS:[0010H]"); // (work->TimerCmd)();
		POP(EBX);
		POP(FS);
		return; // リターン先で、cmdやcmd_freeを書き戻してくれる。rewindは、コマンドライト時にチェックする
	}
	(offset) cmd += 8;
	cmd_free += 2;
	if (work->motor2 != 0) {
		// タイマーのキャンセル
		work->motor2 = 0; // 指定bitを0にする
		MOV(EAX, DS);
		PUSH(FS);
		FS = AX;
		PUSH(EBX);
		EBX = /* (offset) &work->timer_cmd6 */ 0x0060;
		asmout("CALL FAR DWORD DS:[0010H]"); // (work->TimerCmd)();
		POP(EBX);
		POP(FS);
	}
	EDX = 0x0202;
	AL = work->trackreg[0];
	OUT(DX, AL);
	asmout("JMP DWORD PTR DS:[EBX]");

timer_int:
	MOV(EAX, CS);
	PUSH(DS);
	EAX += 8;
	DS = AX;
	EDX = 0x0202;
	AL = work->trackreg[0];
	OUT(DX, AL);

	(offset) cmd = work->MC_ptr;
	cmd_free = work->MC_free;

	(offset) cmd += 8;
	cmd_free += 2;

	asmout("CALL DWORD PTR DS:[EBX]");

	work->MC_ptr = (offset) cmd;
	work->MC_free = cmd_free;

	POP(DS);
	CLC();
	RETF(); // (far) return;

	asmout("FDC_MC_drive_table DB 010H, 020H, 040H, 080H");
}

void near FDC_MC_DriveOff()
/