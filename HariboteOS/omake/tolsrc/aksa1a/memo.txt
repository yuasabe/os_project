著作権者は川合秀実。ライセンスはKL-01。

使い方：DOSプロンプトで、
prompt>aska
とやると最低限度の説明が出る。

usage>aksa binfile ofs0 eip0 dd lines

  binfile：バイナリファイル  IA-32の実行コードが含まれていればどんなファイルでもよい。
  ofs0：逆ASKAしたいバイナリがファイルのどこに入っているか。
  eip0：そのバイナリの開始EIPの値。
  dd：0なら16bitモードで翻訳。1なら32bitモードで翻訳。
  lines：翻訳行数。

出力は標準出力に行うので、テキストファイルにしたければ適当にリダイレクトすればいいです。
mikan();というのがでたら、それはaksaが未完成で翻訳に失敗したという意味です。

---

例：helloc4.orgの逆ASKA

（註：helloc4.orgというのは、helloc4.binをbim2bin3で解凍したもの）
（prompt>bim2bin3 -restore in:helloc4.bin out:helloc4.org）

prompt>aksa helloc4.org 0 0 1 5
file-ofs   EIP
00000000 00000000 2E 8B 62 20       ESP = (int) [CS:EDX + 0x20];
00000004 00000004 8B FC             EDI = ESP;
00000006 00000006 EB 20             goto 0x00000028;
00000008 00000008 47                EDI++;
00000009 00000009 55                PUSH(EBP);

ここでgoto 0x28があったので、0x28から翻訳させてみる。

prompt>aksa helloc4.org 0x28 0x28 1 100
file-ofs   EIP
00000028 00000028 6A FF             PUSH(- 0x01);
0000002A 0000002A 0E                PUSH(CS);
0000002B 0000002B 68 59 02 00 00    PUSH(0x00000259);
00000030 00000030 2E FF 72 24       PUSH((int) [CS:EDX + 0x24]);
00000034 00000034 6A 82             PUSH(- 0x7E);
00000036 00000036 6A 04             PUSH(0x04);
00000038 00000038 8B DC             EBX = ESP;
0000003A 0000003A 57                PUSH(EDI);
0000003B 0000003B 9A 00 00 00 00 C7 CALLF(0x00C7, 0x00000000);
00000042 00000042 5C                POP(ESP);
00000043 00000043 E9 00 00 00 00    JMP(0x00000048);
00000048 00000048 55                PUSH(EBP);
00000049 00000049 89 E5             EBP = ESP;
0000004B 0000004B 56                PUSH(ESI);
0000004C 0000004C 53                PUSH(EBX);
0000004D 0000004D 6A 00             PUSH(0x00);
0000004F 0000004F 68 00 01 00 00    PUSH(0x00000100);
00000054 00000054 E8 FD 00 00 00    CALL(0x00000156);
00000059 00000059 89 04 24          (int) [SS:ESP] = EAX;
0000005C 0000005C 6A 04             PUSH(0x04);
0000005E 0000005E 6A 10             PUSH(0x10);
00000060 00000060 E8 DC 00 00 00    CALL(0x00000141);
00000065 00000065 6A 00             PUSH(0x00);
00000067 00000067 6A 30             PUSH(0x30);
00000069 00000069 68 88 00 00 00    PUSH(0x00000088);
0000006E 0000006E 68 00 02 00 00    PUSH(0x00000200);
00000073 00000073 68 80 00 00 00    PUSH(0x00000080);
00000078 00000078 E8 D9 00 00 00    CALL(0x00000156);
0000007D 0000007D 89 04 24          (int) [SS:ESP] = EAX;
00000080 00000080 6A 20             PUSH(0x20);
00000082 00000082 6A 10             PUSH(0x10);
00000084 00000084 E8 B8 00 00 00    CALL(0x00000141);
00000089 00000089 83 C4 2C          ESP += 0x2C;
0000008C 0000008C 89 C3             EBX = EAX;
0000008E 0000008E 6A 00             PUSH(0x00);
00000090 00000090 6A 00             PUSH(0x00);
00000092 00000092 68 C0 00 00 00    PUSH(0x000000C0);
00000097 00000097 50                PUSH(EAX);
00000098 00000098 6A 00             PUSH(0x00);
0000009A 0000009A 6A 00             PUSH(0x00);
0000009C 0000009C 6A 01             PUSH(0x01);
0000009E 0000009E 6A 07             PUSH(0x07);
000000A0 000000A0 6A 00             PUSH(0x00);
000000A2 000000A2 6A 78             PUSH(0x78);
000000A4 000000A4 E8 AD 00 00 00    CALL(0x00000156);
000000A9 000000A9 89 04 24          (int) [SS:ESP] = EAX;
000000AC 000000AC 68 00 10 00 00    PUSH(0x00001000);
000000B1 000000B1 6A 28             PUSH(0x28);
000000B3 000000B3 6A 14             PUSH(0x14);
000000B5 000000B5 E8 87 00 00 00    CALL(0x00000141);
000000BA 000000BA 83 C4 34          ESP += 0x34;
000000BD 000000BD 89 C6             ESI = EAX;
000000BF 000000BF 6A 00             PUSH(0x00);
000000C1 000000C1 6A 00             PUSH(0x00);
000000C3 000000C3 68 C0 00 00 00    PUSH(0x000000C0);
000000C8 000000C8 53                PUSH(EBX);
000000C9 000000C9 6A 10  