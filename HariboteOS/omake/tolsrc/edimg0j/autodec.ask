segment CODE(USE32, PARA);
default(code == CODE);

asmout("[FILE 'autodec.ask']");
asmout("GLOBAL _autodecomp");

/* int autodecomp(int siz0, UCHAR *p0, int siz); */

void getnum_s7s();
void getnum_s7();
void lzrestore_stk1();
void lzrestore_stk2();
void lzrestore_tek5();

#define SEG_ES		DS
#define SEG_CS		DS

void _autodecomp()
{
	PUSHFD();
	PUSHAD();
	CLD();
	EDI = (int) [SS:ESP + 48]; /* siz */
	ESI = (int) [SS:ESP + 44]; /* p0 */
	if ((unsigned) EDI < 17)
		goto skip;
	EDI += ESI;
	ECX = 14;
	do {
		AL = [DS:ESI + ECX + 1];
		asmout("CMP AL,[DS:.sign+ECX]");
		if (!= 0)
			goto skip;
		ECX--;
	} while ((signed) >= 0);
	AL = [DS:ESI];
	ESI += 16;
	if (AL == 0x83)
		goto pass;
	if (AL == 0x85)
		goto pass;
	if (AL != 0x89)
		goto err;
pass:
	getnum_s7s();
	XCHG(EAX, EBP);
	if (== 0)
		goto decomped;
	NEG(ESI);
	LEA(ECX, [EDI + ESI]); /* ECX:圧縮データサイズ */
	NEG(ESI);
	EDI = (int) [SS:ESP + 40]; /* siz0 */
	LEA(EBX, [ECX + EBP]);
	if ((unsigned) EBX > EDI)
		goto err;
	EDI += (int) [SS:ESP + 44]; /* p0 */
	PUSH(EDI);
	EDI -= ECX;
	PUSH(EDI);
	asmout("REP MOVSB");
	POP(ESI);
	POP(EDX);
	EDI = (int) [SS:ESP + 44]; /* p0 */
	/* ESI, EDI, EBP, EDX */
	getnum_s7s();
	CH = [DS:EDI];
	TEST(AL, 0x01);
	if (== 0) {
		/* ショート形式(tek5のみ) */
		if (CH != 0x89)
			goto err;
		ESI--;
	} else {
		TEST(AL, 0x20);
		if (!= 0)
			goto err;
		PUSH(EAX);
		CL = AL;
		(unsigned char) CL >>= 1;
		EAX = 0;
		CL &= 0x0f;
		EAX++;
		CL += 8;
		SHL(EAX, CL);
		CMP(EAX, EBP);
		POP(EAX);
		if ((unsigned) <) {
			if (CL != 8)
				goto err;
		}
		TEST(AL, 0x40);
		if (!= 0)
			getnum_s7s();
	}
	PUSH(EBP);
	if (CH == 0x89)
		lzrestore_tek5();
	else if (CH == 0x85)
		lzrestore_stk2();
	else
		lzrestore_stk1();
	TEST(AL, AL);
	POP(EBP);
	if (== 0) {
decomped:
		(int) [SS:ESP + 28] = EBP; /* EAX */
		POPAD();
		POPFD();
		return;
	}
err:
	POPAD();
	POPFD();
	EAX |= -1;
	return;
skip:
	POPAD();
	POPFD();
	EAX = (int) [SS:ESP + 12]; /* siz */
	return;

sign:
	DB(      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00);
	DB(0x4f, 0x53, 0x41, 0x53, 0x4b, 0x43, 0x4d, 0x50);
}

void getnum_s7s()
/* DS:ESIからリード */
{
	EAX = 0;
	do {
		EAX <<= 8;
		LODSB();
		(unsigned int) EAX >>= 1;
	} while (CF == 0);
	return; /* CF = 1, TEST(EAX, EAX); */
}

/* 以下tek5用 */

void decodemain();
void decodemain1();

struct STR_BITMODEL { /* 32バイト */
	unsigned char t, m, s, dmy;
	unsigned int prb0, prb1, tmsk, ntm, lt, lt0, prb01;
};

struct STR_TEK5 { /* 320x4 */
	int p;
	unsigned int range, code, lit1, repdis[16];
	STR_BITMODEL bm[1024]; /* 32 * 32 */
	int ptbm[64]; /* 16 * 4 */
	int nowPos, state, posStateMask;
	unsigned char lc8, lc, lit0cntmsk, dmy_uc;
	int literalPosMask, outSize, outStream, q0, dmy2[128];
};

struct STR_LZMA {
	int repdis[16], nowPos, state, posStateMask;
	unsigned char lc8, lc, previousIsMatch, previousByte;
	int literalPosMask, outSize, outStream;
	int rd_src, rd_src1, rd_range, rd_code;
	int p[1234];
};

void setbm();

/* ASKAのバグ回避用 */
#define aBM		bm[EDI]

void lzrestore_tek5()
/* ESI, EDI, EBP */
{
	LODSB();
	AH = AL;
	AL &= 0x0f;
	if (AL == 0x01)
		goto tek5_z0;
	if (AL == 0x05)
		goto tek5_z1;
	if (AL == 0x09)
		goto tek5_z2;
err:
	EAX = 0;
	EAX++;
	return;
tek5_z0:
	(unsigned char) EAX >>= 12;
	CL = 9 * 5;
	EAX &= 0x0f;
	if (!= 0) {
		if ((unsigned) AL >= 3)
			goto err;
		asmout("MOV AL,[CS:.prm_table-1+EAX]");
	} else
		LODSB();
	DIV(CL);
	ROR(EAX, 8); /* pbを24-31へ, AHをALへ */
	CL = 9;
	AH = 0;
	DIV(CL);
	CL = AL; /* lp */
	CL += AH; /* lc */
	EBX = 768; /* LZMA_LIT_SIZE */
	SHL(EBX, CL);
	EBX += 1846; /* LZMA_BASE_SIZE */

	ECX = ESP;
	do {
		PUSH(1024);
		EBX--;
	} while (!= 0);
	PUSH(EAX); /* rd->Code */
	PUSH(-1); /* rd->Range */
	PUSH(EDI); /* rd->BufferLim -> outstream0 */
	PUSH(ESI);
	PUSH(EDI);
	PUSH(EBP); /* 出力サイズ */
	EDI = ECX;

	CL = AL; /* lp */
	EBX = 256;
	CL += AH; /* lc */
	SHL(EBX, CL);
	EBX += 1846 /* Literal */;

	EDX = 0;
	EDX++;
	CL = AL; /* lp */
	SHL(EDX, CL);
	EDX--;
	PUSH(EDX); /* literalPosMask */
	AL = 8;
	AL -= AH;
	/* AH:lc, AL:8-lc */
	PUSH(EAX); /* 8-lc, lc, 0, pb */
	ROL(EAX, 8);
	EDX = 0;
	EDX++;
	CL = AL; /* pb */
	SHL(EDX, CL);
	EDX--;
	PUSH(EDX); /* posStateMask */
	PUSH(0); /* state */
	PUSH(1); /* nowPos */
	PUSH(-4); /* rep0-3 */
	PUSH(-3);
	PUSH(-2);
	PUSH(-1);

	EBP = ESP;
	PUSH(EDI); /* 旧スタック */
	/* 合計で64KBくらいの余裕がほしい */

	CL = 4;
	do {
		EAX <<= 8;
		LODSB();
		CL--;
	} while (!= 0);
	STR_LZMA *work0 == SS:EBP;
	work0->rd_src = ESI;
	work0->rd_code = EAX;
	work0->p[1846 * 4] = EBX;

	decodemain();

	POP(EAX);
	XCHG(EAX, ESP);
	EAX = 0;
	return;

prm_table:
	DB(0x5d, 0x00);

tek5_z1:
tek5_z2:
	BL = AL;
	(unsigned char) EAX >>= 12;
	CL = 9 * 5;
	EAX &= 0x0f;
	if (!= 0) {
		if ((unsigned) AL >= 2)
			goto err;
		asmout("MOV AL,[CS:.prm_table1-1+EAX]");
	} else
		LODSB();
	DIV(CL);
	/* AL = lp; AH = lc + pb * 9; */
	BH = AL; /* lp */
	AL = AH;
	CL = 9;
	AH = 0;
	DIV(CL);
	/* AL = pb, AH = lc, BH = lp */
	CL = BH;
	CL += AH;
	EDX = 768;
	SHL(EDX, CL);
	EDX += 2064;
	ECX = ESP;
	do {
		PUSH(0x8000);
		EDX--;
	} while (!= 0);
	ESP -= 128;
	EDX++; /* EDX = 1 */
	PUSH(EDI); /* q0 */
	PUSH(EDI); /* q */
	EDI = ECX; /* old ESP */
	PUSH(EBP); /* siz */
	CL = BH; /* lp */
	SHL(EDX, CL);
	EDX--;
	PUSH(EDX); /* literalPosMask */
	EDX = 0x00780008;
	DH = AH;
	DL -= AH;
	PUSH(EDX); /* とりあえず lit0cntmsk=0x78 */
	EDX |= -1;
	CL = AL; /* pb */
	SHL(EDX, CL);
	NOT(EDX);
	PUSH(EDX); /* posStateMask */
	PUSH(0); /* state */
	PUSH(1); /* nowPos */
	DL = 16;
	do {
		PUSH(8); /* ptbm */
		DL--;
	} while (!= 0);
	ESP -= 1024;
	PUSH(-4); /* rep0-3 */
	PUSH(-3);
	PUSH(-2);
	PUSH(-1);
	EDX = 256;
	CL = AH;
	CL += BH;
	SHL(EDX, CL);
	EDX += 320 + 2064;
	PUSH(EDX); /* lit1 */
	/* 以降EAX破壊 */
	BH = -1;
	if (BL == 0x09) {
		LODSB();
		BH = AL;
	}
	CL = 4;
	do {
		EAX <<= 8;
		LODSB();
		CL--;
	} while (!= 0);
	PUSH(EAX); /* code(仮) */
	PUSH(-1); /* range */
	PUSH(ESI);
	EBP = ESP;
	PUSH(EDI); /* 旧スタック */

	STR_TEK5 *work == SS:EBP;
//	STR_BITMODEL *bm == SS:EBP + EDI;
	STR_BITMODEL *bm == SS:EBP;
	EDI = 32;
	do {
		aBM.lt  = 1;
		aBM.lt0 = 16 * 1024;
		if ((unsigned) EDI < 160) { /* 32 + 4 * 32 */
			aBM.lt  = 0x7fffffff;
			aBM.lt0 = 0x80000000;
		}
		if ((unsigned) EDI >= 800) /* 32 + 24 * 32 */
			aBM.lt0 = 8 * 1024;
		aBM.t = 5;
		aBM.m = 5;
		aBM.s = 0;
		EDI += 32;
	} while ((unsigned) EDI < 1056); /* 32 + 32 * 32 */
//	bm[64].t = 5; /* bm[1], for fchgprm */
	bm[64].m = 3;
	bm[96].t = 9; /* bm[2], for tbmt, tbmm */
	bm[96].m = 2;
	TEST(BH, 0x40);
	if (!= 0) {
		bm[128].t = 0; /* bm[3], for fchglt */
		bm[128].m = 1;
		(int) [SS:EBP + 1536] = 0xffff; /* (320 + 64) * 4 == fchglt */
	}
	bm[736].t = 0; /* bm[22], for repg3 */
	bm[736].m = 1;
	(int) [SS:EBP + 1540] = 0xffff; /* (320 + 65) * 4 == repg3 */
	AL = 18;
	(char) [SS:EBP + 1096] = AL; /* 32 + 1024 + 4 * 10 == ptbm[10] */
	(char) [SS:EBP + 1100] = AL; /* 32 + 1024 + 4 * 11 == ptbm[11] */
	(char) [SS:EBP + 1104] = AL; /* 32 + 1024 + 4 * 12 == ptbm[12] */
	if (BL == 0x05) {
		/* z1 */
		bm[736].lt  = 0x7fffffff; /* bm[22], for repg3 */
		bm[736].lt0 = 0x80000000;
	} else {
		EDI = 32 + 1024;
		AL = 8;
		do {
			(char) [SS:EBP + EDI] = AL;
			EDI += 4;
			EAX++;
		} while ((unsigned) AL < 22);
		CL = BH;
		AL = 0x7f;
		CL &= 0x03;
		SHR(AL, CL);
		AL &= 0x78;
		work->lit0cntmsk = AL;
		TEST(BH, 0x04);
		if (== 0)
			(char) [SS:EBP + 1060]--; /* 32 + 1024 +  1 * 4 == ptbm[ 1] */
		TEST(BH, 0x08);
		if (== 0)
			(char) [SS:EBP + 1076]--; /* 32 + 1024 +  5 * 4 == ptbm[ 5] */
		TEST(BH, 0x10);
		if (== 0)
			(char) [SS:EBP + 1092]--; /* 32 + 1024 +  9 * 4 == ptbm[ 9] */
		TEST(BH, 0x20);
		if (== 0)
			(char) [SS:EBP + 1100]--; /* 32 + 1024 + 11 * 4 == ptbm[11] */
	}
	EDI = 32 + 1024;
	do {
		EAX = [SS:EBP + EDI];
		EAX++;
		EAX *= 32;
		[SS:EBP + EDI] = EAX;
		EDI += 4;
	} while ((unsigned) EDI < 1120); /* 32 + 1024 + 16 * 4 */
	EDI = 32;
	do {
		setbm();
		EDI += 32;
	} while ((unsigned) EDI < 1056); /* 32 + 32 * 32 */

	decodemain1();

	POP(EAX);
	XCHG(EAX, ESP);
	EAX = 0;
	return;

prm_table1:
	DB(0x00);
}

/* 以下z0専用 */

#define kTopValue				0x01000000
#define kNumBitModelTotalBits 	11
#define kBitModelTotal			0x0800
#define kNumMoveBits			5

void rdd_direct();
void rdd_bit();
void rdd_bittree();
void rdd_literal();
void getlen();

void rdd_direct()
/* EBP, ECX, ESI */
{
	STR_LZMA *work == SS:EBP;
	unsigned int result == EDX, range == EDI, code == EAX;
	unsigned char *src == DS:ESI;
	do {
		if ((unsigned) range < kTopValue)
			goto shift;
shift1:
		range >>= 1;
		CMP(code, range); /* >= なら CF = 0 */
		if ((unsigned) >=)
			code -= range; /* 相変わらずCF = 0 */
		RCL(result, 1);
		ECX--;
	} while (!= 0);
	return;
shift:
	code <<= 8;
	range <<= 8;
	LODSB();
	goto shift1;	/* 1回でかならず足りるかどうかはそれより前による */
}

/* 00000011111 */
/* 11111100001 */
/* どちらにしても、1回で足りる */

void rdd_bittree()
{
	EDX = 1;
}

void rdd_bittree0()
/* 結果は上位ビットにごみがつくので、呼び出し元でマスクせよ */
/* EBX:prob0 */
{
	STR_LZMA *work == SS:EBP;
	unsigned int result == EDX, range == EDI, code == EAX;
	unsigned int bound == EBX, prob == EDX, tmp == ECX;
	unsigned char *src == DS:ESI;

	do {
		PUSH(EBX);
		EBX += result;
		PUSH(result);
		PUSH(ECX);
		PUSH(EBX);
		prob = work->p[EBX * 4];
		if ((unsigned) range < kTopValue)
			goto shift;
shift1:
		bound = range;
		tmp = prob;
		bound >>= kNumBitModelTotalBits;
		IMUL(bound, prob);
		if ((unsigned) code < bound) {
			range = bound;
			prob--;
			bound = 0;
			tmp -= kBitModelTotal + 1;
		}
		code -= bound;
		range -= bound;
		(signed int) tmp >>= kNumMoveBits;
		POP(EBX);
		prob -= tmp; /* CFにデコード結果 */
		POP(ECX);
		work->p[EBX * 4] = prob;
		POP(result);
		POP(EBX);
		RCL(result, 1);
		CL--;
	} while (!= 0);
	return;
shift:
	code <<= 8;
	range <<= 8;
	LODSB();
	goto shift1;
}

#define LenChoice			0
#define LenChoice2			1
#define LenLow				2
#define LenMid				130
#define LenHigh				258
#define kLenNumLowBits		3
#define kLenNumMidBits		3
#define kLenNumHighBits		8

void getlen()
/* EBXにprob0, EDX:posState */
/* EDXに返す */
{
	PUSH(EDX);
	rdd_bit(); /* LenChoice */
	if (CF == 0) {
		POP(EDX);
		CL = kLenNumLowBits;
		LEA(EBX, [EBX + EDX * 8 + 2]); /* EBX += LenLow + posState << kLenNumLowBits */
		rdd_bittree();
		EDX -= 8;
		return;
	}
	EBX++;
	rdd_bit(); /* LenChoice2 */
	POP(EDX);
	if (CF == 0) {
		CL = kLenNumMidBits;
		LEA(EBX, [EBX + EDX * 8 + 129]); /* EBX += LenMid - 1 + posState << kLenNumMidBits */
	//	rdd_bittree();
	//	EDX += 8 - 8;
	//	return;
		goto rdd_bittree;
	}
	EBX += LenHigh - 1;
	CL = kLenNumHighBits;
	rdd_bittree();
	EDX -= 248 + 256; /* kLenNumHighSymbols - 8 */
	if ((unsigned) > 0) {
		ECX = EDX;
		EDX = 1;
		rdd_direct();
		LEA(ECX, [EDX - 1]);
		EDX = 1;
		rdd_direct();
		EDX--;
	}
	EDX += 16 + 248;
	return;
}

#define kNumPosSlotBits 		6
#define kNumLenToPosStates1 	3
#define kNumPosBitsMax 			4
#define kStartPosModelIndex 	4
#define kEndPosModelIndex		14
#define kNumAlignBits			4
#define kMatchMinLen			2

#define IsMatch			0
#define IsRep			192
#define IsRepG0			204
#define IsRepG1			216
#define IsRepG2			228
#define IsRep0Long		240
#define PosSlot			432
#define SpecPos			688
#define Align			802
#define LenCoder		818
#define RepLenCoder		1332
#define Literal			1846

void rdd_bit()
/* prob:EBX > CF */
{
	STR_LZMA *work == SS:EBP;
	unsigned int range == EDI, code == EAX;
	unsigned int bound == EBX, prob == EDX, tmp == ECX;
	unsigned char *src == DS:ESI;

	PUSH(EBX);
	prob = work->p[EBX * 4];
	if ((unsigned) range < kTopValue)
		goto shift;
shift1:
	bound = range;
	tmp = prob;
	bound >>= kNumBitModelTotalBits;
	IMUL(bound, prob);
	if ((unsi