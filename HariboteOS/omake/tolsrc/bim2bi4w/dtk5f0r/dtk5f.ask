segment CODE(USE32, PARA);
default(code == CODE);

asmout("[FILE 'dtk5f.ask']");
asmout("GLOBAL _tek_checkformat");
asmout("GLOBAL _tek_decode");

#define SEG_ES		DS
#define SEG_CS		DS

void getnum_s7s();
void lzrestore_tek5();
void decodemain();
void decodemain1();

struct STR_BITMODEL { /* 32バイト */
	unsigned char t, m, s, dmy;
	unsigned int prb0, prb1, tmsk, ntm, lt, lt0, prb01;
};

struct STR_TEK5 { /* 320x4 */
	int p;
	unsigned int range, code, lit1, repdis[16];
	STR_BITMODEL bm[1024]; /* 32 * 32 */
	int ptbm[64]; /* 16 * 4 */
	int nowPos, state, posStateMask;
	unsigned char lc8, lc, lit0cntmsk, dmy_uc;
	int literalPosMask, outSize, outStream, q0, dmy2[128];
};

struct STR_LZMA {
	int repdis[16], nowPos, state, posStateMask;
	unsigned char lc8, lc, previousIsMatch, previousByte;
	int literalPosMask, outSize, outStream;
	int rd_src, rd_src1, rd_range, rd_code;
	int p[1234];
};

void _tek_checkformat()
{
	PUSHFD();
	PUSH(ESI);
	PUSH(ECX);
	CLD();
	EAX |= -1;
	if ((signed) (int) [SS:ESP + 16] < 17)
		goto err;
	ESI = (int) [SS:ESP + 20];
	ECX = 15;
	do {
		AL = [DS:ESI + ECX];
		asmout("CMP AL,[CS:.sign+ECX]");
		if (!= 0) {
			AL = -1;
			if (ECX != 0)
				goto err;
			EAX--;
			goto err;
		}
		ECX--;
	} while ((signed) >= 0);
	ESI += 16;
	getnum_s7s();
err:
	POP(ECX);
	POP(ESI);
	POPFD();
	return;
sign:
	DB(0x89, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00);
	DB(0x4f, 0x53, 0x41, 0x53, 0x4b, 0x43, 0x4d, 0x50);
}

void getnum_s7s()
/* DS:ESIからリード */
{
	EAX = 0;
	do {
		EAX <<= 8;
		LODSB();
		(unsigned int) EAX >>= 1;
	} while (CF == 0);
	return; /* CF = 1, TEST(EAX, EAX); */
}

/* int tek_decode(int siz, UCHAR *p, UCHAR *q) */

void _tek_decode()
{
	PUSHFD();
	PUSHAD();
	CLD();
	EDX = (int) [SS:ESP + 40]; /* siz */
	ESI = (int) [SS:ESP + 44];
	EDI = (int) [SS:ESP + 48];
//	EDX += ESI;
	ESI += 16;
	getnum_s7s();
	if (!= 0) {
		XCHG(EAX, EBP);
		getnum_s7s();
		TEST(AL, 0x01);
		if (== 0) {
			ESI--;
			lzrestore_tek5(); /* EAXにコンディションを返す */
		} else {
			TEST(AL, 0x20);
			if (!= 0)
				goto err;
			PUSH(EAX);
			CL = AL;
			(unsigned char) CL >>= 1;
			EAX = 0;
			CL &= 0x0f;
			EAX++;
			CL += 8;
			SHL(EAX, CL);
			CMP(EAX, EBP);
			POP(EAX);
			if ((unsigned) <) {
				if (CL != 8)
					goto err;
			}
			TEST(AL, 0x40);
			if (!= 0)
				getnum_s7s();
			lzrestore_tek5();
		}
	}
fin:
	(int) [SS:ESP + 28] = EAX;
	POPAD();
	POPFD();
	return;
err:
	EAX = 0;
	EAX++;
	goto fin;
}

void setbm();

/* ASKAのバグ回避用 */
#define aBM		bm[EDI]

void lzrestore_tek5()
/* ESI, EDI, EBP */
{
	LODSB();
	AH = AL;
	AL &= 0x0f;
	if (AL == 0x01)
		goto tek5_z0;
	if (AL == 0x05)
		goto tek5_z1;
	if (AL == 0x09)
		goto tek5_z2;
err:
	EAX = 0;
	EAX++;
	return;
tek5_z0:
	(unsigned char) EAX >>= 12;
	CL = 9 * 5;
	EAX &= 0x0f;
	if (!= 0) {
		if ((unsigned) AL >= 3)
			goto err;
		asmout("MOV AL,[CS:.prm_table-1+EAX]");
	} else
		LODSB();
	DIV(CL);
	ROR(EAX, 8); /* pbを24-31へ, AHをALへ */
	CL = 9;
	AH = 0;
	DIV(CL);
	CL = AL; /* lp */
	CL += AH; /* lc */
	EBX = 768; /* LZMA_LIT_SIZE */
	SHL(EBX, CL);
	EBX += 1846; /* LZMA_BASE_SIZE */

	ECX = ESP;
	do {
		PUSH(1024);
		EBX--;
	} while (!= 0);
	PUSH(EAX); /* rd->Code */
	PUSH(-1); /* rd->Range */
	PUSH(EDI); /* rd->BufferLim -> outstream0 */
	PUSH(ESI);
	PUSH(EDI);
	PUSH(EBP); /* 出力サイズ */
	EDI = ECX;

	CL = AL; /* lp */
	EBX = 256;
	CL += AH; /* lc */
	SHL(EBX, CL);
	EBX += 1846 /* Literal */;

	EDX = 0;
	EDX++;
	CL = AL; /* lp */
	SHL(EDX, CL);
	EDX--;
	PUSH(EDX); /* literalPosMask */
	AL = 8;
	AL -= AH;
	/* AH:lc, AL:8-lc */
	PUSH(EAX); /* 8-lc, lc, 0, pb */
	ROL(EAX, 8);
	EDX = 0;
	EDX++;
	CL = AL; /* pb */
	SHL(EDX, CL);
	EDX--;
	PUSH(EDX); /* posStateMask */
	PUSH(0); /* state */
	PUSH(1); /* nowPos */
	PUSH(-4); /* rep0-3 */
	PUSH(-3);
	PUSH(-2);
	PUSH(-1);

	EBP = ESP;
	PUSH(EDI); /* 旧スタック */
	/* 合計で64KBくらいの余裕がほしい */

	CL = 4;
	do {
		EAX <<= 8;
		LODSB();
		CL--;
	} while (!= 0);
	STR_LZMA *work0 == SS:EBP;
	work0->rd_src = ESI;
	work0->rd_code = EAX;
	work0->p[1846 * 4] = EBX;

	decodemain();

	POP(EAX);
	XCHG(EAX, ESP);
	EAX = 0;
	return;

prm_table:
	DB(0x5d, 0x00);

tek5_z1:
tek5_z2:
	BL = AL;
	(unsigned char) EAX >>= 12;
	CL = 9 * 5;
	EAX &= 0x0f;
	if (!= 0) {
		if ((unsigned) AL >= 2)
			goto err;
		asmout("MOV AL,[CS:.prm_table1-1+EAX]");
	} else
		LODSB();
	DIV(CL);
	/* AL = lp; AH = lc + pb * 9; */
	BH = AL; /* lp */
	AL = AH;
	CL = 9;
	AH = 0;
	DIV(CL);
	/* AL = pb, AH = lc, BH = lp */
	CL = BH;
	CL += AH;
	EDX = 768;
	SHL(EDX, CL);
	EDX += 2064;
	ECX = ESP;
	do {
		PUSH(0x8000);
		EDX--;
	} while (!= 0);
	ESP -= 128;
	EDX++; /* EDX = 1 */
	PUSH(EDI); /* q0 */
	PUSH(EDI); /* q */
	EDI = ECX; /* old ESP */
	PUSH(EBP); /* siz */
	CL = BH; /* lp */
	SHL(EDX, CL);
	EDX--;
	PUSH(EDX); /* literalPosMask */
	EDX = 0x00780008;
	DH = AH;
	DL -= AH;
	PUSH(EDX); /* とりあえず lit0cntmsk=0x78 */
	EDX |= -1;
	CL = AL; /* pb */
	SHL(EDX, CL);
	NOT(EDX);
	PUSH(EDX); /* posStateMask */
	PUSH(0); /* state */
	PUSH(1); /* nowPos */
	DL = 16;
	do {
		PUSH(8); /* ptbm */
		DL--;
	} while (!= 0);
	ESP -= 1024;
	PUSH(-4); /* rep0-3 */
	PUSH(-3);
	PUSH(-2);
	PUSH(-1);
	EDX = 256;
	CL = AH;
	CL += BH;
	SHL(EDX, CL);
	EDX += 320 + 2064;
	PUSH(EDX); /* lit1 */
	/* 以降EAX破壊 */
	BH = -1;
	if (BL == 0x09) {
		LODSB();
		BH = AL;
	}
	CL = 4;
	do {
		EAX <<= 8;
		LODSB();
		CL--;
	} while (!= 0);
	PUSH(EAX); /* code(仮) */
	PUSH(-1); /* range */
	PUSH(ESI);
	EBP = ESP;
	PUSH(EDI); /* 旧スタック */

	STR_TEK5 *work == SS:EBP;
//	STR_BITMODEL *bm == SS:EBP + EDI;
	STR_BITMODEL *bm == SS:EBP;
	EDI = 32;
	do {
		aBM.lt  = 1;
		aBM.lt0 = 16 * 1024;
		if ((unsigned) EDI < 160) { /* 32 + 4 * 32 */
			aBM.lt  = 0x7fffffff;
			aBM.lt0 = 0x80000000;
		}
		if ((unsigned) EDI >= 800) /* 32 + 24 * 32 */
			aBM.lt0 = 8 * 1024;
		aBM.t = 5;
		aBM.m = 5;
		aBM.s = 0;
		EDI += 32;
	} while ((unsigned) EDI < 1056); /* 32 + 32 * 32 */
//	bm[64].t = 5; /* bm[1], for fchgprm */
	bm[64].m = 3;
	bm[96].t = 9; /* bm[2], for tbmt, tbmm */
	bm[96].m = 2;
	TEST(BH, 0x40);
	if (!= 0) {
		bm[128].t = 0; /* bm[3], for fchglt */
		bm[128].m = 1;
		(int) [SS:EBP + 1536] = 0xffff; /* (320 + 64) * 4 == fchglt */
	}
	bm[736].t = 0; /* bm[22], for repg3 */
	bm[736].m = 1;
	(int) [SS:EBP + 1540] = 0xffff; /* (320 + 65) * 4 == repg3 */
	AL = 18;
	(char) [SS:EBP + 1096] = AL; /* 32 + 1024 + 4 * 10 == ptbm[10] */
	(char) [SS:EBP + 1100] = AL; /* 32 + 1024 + 4 * 11 == ptbm[11] */
	(char) [SS:EBP + 1104] = AL; /* 32 + 1024 + 4 * 12 == ptbm[12] */
	if (BL == 0x05) {
		/* z1 */
		bm[736].lt  = 0x7fffffff; /* bm[22], for repg3 */
		bm[736].lt0 = 0x80000000;
	} else {
		EDI = 32 + 1024;
		AL = 8;
		do {
			(char) [SS:EBP + EDI] = AL;
			EDI += 4;
			EAX++;
		} while ((unsigned) AL < 22);
		CL = BH;
		AL = 0x7f;
		CL &= 0x03;
		SHR(AL, CL);
		AL &= 0x78;
		work->lit0cntmsk = AL;
		TEST(BH, 0x04);
		if (== 0)
			(char) [SS:EBP + 1060]--; /* 32 + 1024 +  1 * 4 == ptbm[ 1] */
		TEST(BH, 0x08);
		if (== 0)
			(char) [SS:EBP + 1076]--; /* 32 + 1024 +  5 * 4 == ptbm[ 5] */
		TEST(BH, 0x10);
		if (== 0)
			(char) [SS:EBP + 1092]--; /* 32 + 1024 +  9 * 4 == ptbm[ 9] */
		TEST(BH, 0x20);
		if (== 0)
			(char) [SS:EBP + 1100]--; /* 32 + 1024 + 11 * 4 == ptbm[11] */
	}
	EDI = 32 + 1024;
	do {
		EAX = [SS:EBP + EDI];
		EAX++;
		EAX *= 32;
		[SS:EBP + EDI] = EAX;
		EDI += 4;
	} while ((unsigned) EDI < 1120); /* 32 + 1024 + 16 * 4 */
	EDI = 32;
	do {
		setbm();
		EDI += 32;
	} while ((unsigned) EDI < 1056); /* 32 + 32 * 32 */

	decodemain1();

	POP(EAX);
	XCHG(EAX, ESP);
	EAX = 0;
	return;

prm_table1:
	DB(0x00);
}

/* 以下z0専用 */

#define kTopValue				0x01000000
#define kNumBitModelTotalBits 	11
#define kBitModelTotal			0x0800
#define kNumMoveBits			5

void rdd_direct();
void rdd_bit();
void rdd_bittree();
void rdd_literal();
void getlen();

void rdd_direct()
/* EBP, ECX, ESI */
{
	STR_LZMA *work == SS:EBP;
	unsigned int result == EDX, range == EDI, code == EAX;
	unsigned char *src == DS:ESI;
	do {
		if ((unsigned) range < kTopValue)
			goto shift;
shift1:
		range >>= 1;
		CMP(code, range); /* >= なら CF = 0 */
		if ((unsigned) >=)
			code -= range; /* 相変わらずCF = 0 */
		RCL(result, 1);
		ECX--;
	} while (!= 0);
	return;
shift:
	code <<= 8;
	range <<= 8;
	LODSB();
	goto shift1;	/* 1回でかならず足りるかどうかはそれより前による */
}

/* 00000011111 */
/* 11111100001 */
/* どちらにしても、1回で足りる */

void rdd_bittree()
{
	EDX = 1;
}

void rdd_bittree0()
/* 結果は上位ビットにごみがつくので、呼び出し元でマスクせよ */
/* EBX:prob0 */
{
	STR_LZMA *work == SS:EBP;
	unsigned int result == EDX, range == EDI, code == EAX;
	unsigned int bound == EBX, prob == EDX, tmp == ECX;
	unsigned char *src == DS:ESI;

	do {
		PUSH(EBX);
		EBX += result;
		PUSH(result);
		PUSH(ECX);
		PUSH(EBX);
		prob = work->p[EBX * 4];
		if ((unsigned) range < kTopValue)
			goto shift;
shift1:
		bound = range;
		tmp = prob;
		bound >>= kNumBitModelTotalBits;
		IMUL(bound, prob);
		if ((unsigned) code < bound) {
			range = bound;
			prob--;
			bound = 0;
			tmp -= kBitModelTotal + 1;
		}
		code -= bound;
		range -= bound;
		(signed int) tmp >>= kNumMoveBits;
		POP(EBX);
		prob -= tmp; /* CFにデコード結果 */
		POP(ECX);
		work->p[EBX * 4] = prob;
		POP(result);
		POP(EBX);
		RCL(result, 1);
		CL--;
	} while (!= 0);
	return;
shift:
	code <<= 8;
	range <<= 8;
	LODSB();
	goto shift1;
}

#define LenChoice			0
#define LenChoice2			1
#define LenLow				2
#define LenMid				130
#define LenHigh				258
#define kLenNumLowBits		3
#define kLenNumMidBits		3
#define kLenNumHighBits		8

void getlen()
/* EBXにprob0, EDX:posState */
/* EDXに返す */
{
	PUSH(EDX);
	rdd_bit(); /* LenChoice */
	if (CF == 0) {
		POP(EDX);
		CL = kLenNumLowBits;
		LEA(EBX, [EBX + EDX * 8 + 2]); /* EBX += LenLow + posState << kLenNumLowBits */
		rdd_bittree();
		EDX -= 8;
		return;
	}
	EBX++;
	rdd_bit(); /* LenChoice2 */
	POP(EDX);
	if (CF == 0) {
		CL = kLenNumMidBits;
		LEA(EBX, [EBX + EDX * 8 + 129]); /* EBX += LenMid - 1 + posState << kLenNumMidBits */
	//	rdd_bittree();
	//	EDX += 8 - 8;
	//	return;
		goto rdd_bittree;
	}
	EBX += LenHigh - 1;
	CL = kLenNumHighBits;
	rdd_bittree();
	EDX -= 248 + 256; /* kLenNumHighSymbols - 8 */
	if ((unsigned) > 0) {
		ECX = EDX;
		EDX = 1;
		rdd_direct();
		LEA(ECX, [EDX - 1]);
		EDX = 1;
		rdd_direct();
		EDX--;
	}
	EDX += 16 + 248;
	return;
}

#define kNumPosSlotBits 		6
#define kNumLenToPosStates1 	3
#define kNumPosBitsMax 			4
#define kStartPosModelIndex 	4
#define kEndPosModelIndex		14
#define kNumAlignBits			4
#define kMatchMinLen			2

#define IsMatch			0
#define IsRep			192
#define IsRepG0			204
#define IsRepG1			216
#define IsRepG2			228
#define IsRep0Long		240
#define PosSlot			432
#define SpecPos			688
#define Align			802
#define LenCoder		818
#define RepLenCoder		1332
#define Literal			1846

void rdd_bit()
/* prob:EBX > CF */
{
	STR_LZMA *work == SS:EBP;
	unsigned int range == EDI, code == EAX;
	unsigned int bound == EBX, prob == EDX, tmp == ECX;
	unsigned char *src == DS:ESI;

	PUSH(EBX);
	prob = work->p[EBX * 4];
	if ((unsigned) range < kTopValue)
		goto shift;
shift1:
	bound = range;
	tmp = prob;
	bound >>= kNumBitModelTotalBits;
	IMUL(bound, prob);
	if ((unsigned) code >= bound) {
		code -= bound;
		range -= bound;
		(signed int) tmp >>= kNumMoveBits;
		POP(EBX);
		prob -= tmp; /* CF = 0 */
		work->p[EBX * 4] = prob;
		return;
	}
	prob--;
//	tmp += - kBitModelTotal + 32 - 1;
	tmp -= kBitModelTotal + 1;
	range = bound;
	(signed int) tmp >>= kNumMoveBits;
	POP(EBX);
	prob -= tmp; /* CF = 1 */
	work->p[EBX * 4] = prob;
	return;
shift:
	do {
		code <<= 8;
		range <<= 8;
		LODSB();
	} while ((unsigned) range < kTopValue);
	goto shift1;
}

void decodemain()
/* EBP */
{
	STR_LZMA *work == SS:EBP;
	ESI = work->rd_src;
//	EDI = work->rd_range;
	EDI |= -1;
	EAX = work->rd_code;
	EBX = IsMatch;
	rdd_bit(); /* これはかならずCF = 0になる（stk5では） */
	if (CF != 0)
		goto err;
	EBX = Literal;
	CL = 8;
	rdd_bittree();
	EBX = work->outStream;
	[SEG_ES:EBX] = DL;
	EBX++;
	work->outStream = EBX;
	EDX = work->nowPos;
	if ((unsigned) EDX < work->outSize) {
loophead:
		EBX = work->state;
		EDX &= work->posStateMask;
		EBX <<= kNumPosBitsMax;
		PUSH(EDX); /* posState */
		EBX += EDX;
		rdd_bit();
		if (CF == 0) {	/* not LZ */
			POP(EDX);
			EBX = work->state;
			PUSH(EDI);
			EDX = work->nowPos;
			EDI = work->outStream;
		//	BL = [SEG_CS:state_table + EBX];
			asmout("MOV BL,[DS:.state_table+EBX]");
			EDX &= work->literalPosMask;
			(char) work->state = BL;
			CL = work->lc;
			EBX = (unsigned char) [SEG_ES:EDI - 1];
			SHL(EDX, CL);
			CL = work->lc8;
			SHR(EBX, CL);
			EBX += EDX;
		//	EDX = work->repdis[0];
			EBX *= 256;
			POP(EDI);
		//	if (work->previousIsMatch != 0)
		//		goto lit1;
			EBX += Literal;
			CL = 8;
			rdd_bittree();
//lit11:
			EBX = work->outStream;
			[SEG_ES:EBX] = DL;
			EDX = work->nowPos;
			EBX++;
			EDX++;
			work->outStream = EBX;
			work->nowPos = EDX;
			if ((unsigned) EDX < work->outSize)
				goto loophead;
			goto fin;
		}
lzphase:
		/* LZ */
	//	work->previousIsMatch = 1;
		EBX = work->state;
		EBX += IsRep;
		rdd_bit();
		if (CF != 0) {	/* repdis */
			EBX += IsRepG0 - IsRep;
			rdd_bit();
			if (CF == 0) {	/* rep[0] */
				EBX = work->state;
				POP(EDX);
				EBX <<= kNumPosBitsMax;
				PUSH(EDX);
				LEA(EBX, [EBX + EDX + IsRep0Long]);
				rdd_bit();
				if (CF == 0) { /* rep[0] && len == 1 */
					POP(EDX);
					BL = (char) work->state;
					PUSH(EDI);
					CMP(BL, 7);
					EDI = work->outStream;
					EDX = work->repdis[0];
					SBB(BL, BL); /* -1, 0 */
					PUSH(EAX);
					BL &= -2;
					AL = [SEG_ES:EDI + EDX];
					EDX = work->nowPos;
					BL += 11; /* 9, 11 */
					STOSB();
					(char) work->state = BL;
					EDX++;
					work->outStream = EDI;
					POP(EAX);
					work->nowPos = EDX;
					POP(EDI);
					if ((unsigned) EDX < work->outSize)
						goto lzdone;
					goto fin;
				}
			} else {
				EBX += IsRepG1 - IsRepG0;
				rdd_bit();
				EDX = work->repdis[4];
				if (CF != 0) {	/* not rep[1] */
					EBX += IsRepG2 - IsRepG1;
					rdd_bit();
					EDX = work->repdis[8];
					if (CF != 0) {	/* not rep[2] */
						EBX = EDX;
						EDX = work->repdis[12];
						work->repdis[12] = EBX;
					}
					EBX = work->repdis[4];
					work->repdis[8] = EBX;
				}
				EBX = work->repdis[0];
				work->repdis[0] = EDX;
				work->repdis[4] = EBX;
			}
			BL = (char) work->state;
			POP(EDX);
			CMP(BL, 7);
			SBB(BL, BL); /* -1, 0 */
			BL &= -3;
			BL += 11; /* 8, 11 */
			(char) work->state = BL;
			EBX = RepLenCoder;
			getlen();
			ECX = EDX;
			EDX = work->repdis[0];
		} else {
			/* not repdis */
			EDX = work->repdis[8];
			EBX = work->repdis[4];
			work->repdis[12] = EDX;
			EDX = work->repdis[0];
			work->repdis[8] = EBX;
			work->repdis[4] = EDX;
			BL = (char) work->state;
			POP(EDX); /* posState */
			CMP(BL, 7);
			SBB(BL, BL); /* -1, 0 */
			BL &= -3;
			BL += 10; /* 7, 10 */
			(char) work->state = BL;
			EBX = LenCoder;
			getlen();
			EBX = EDX;
			PUSH(EDX); /* len */
			if ((unsigned) EBX >= kNumLenToPosStates1)
				EBX = kNumLenToPosStates1;
			EBX <<= kNumPosSlotBits;
			CL = kNumPosSlotBits;
			EBX += PosSlot;
			rdd_bittree();
			EDX &= 0x3f;
			if ((unsigned) EDX >= kStartPosModelIndex) {
				ECX = EDX;
				EBX = EDX;
				(unsigned int) ECX >>= 1;
				EDX = 1;
				ECX--; /* CF不変 */
				RCL(EDX, 1);
				if ((unsigned) EBX < kEndPosModelIndex) {
					/* リバースでECXビットをEDXに押し込む */
					PUSH(EDX);
					SHL(EDX, CL);
					NOT(EBX);
					PUSH(ECX);
					LEA(EBX, [EBX + EDX + SpecPos]);
					rdd_bittree();
					EBX = EDX;
					POP(ECX);
				} else {
	